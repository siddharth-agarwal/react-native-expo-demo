import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type RootStackParamList = {
  Root: undefined;
  NotFound: undefined;
};

/* Generated by restful-react */

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

const encodingFn = encodeURIComponent

const encodingTagFactory = (encodingFn: typeof encodeURIComponent) => (
  strings: TemplateStringsArray,
  ...params: (string | number | boolean)[]
) =>
  strings.reduce(
      (accumulatedPath, pathPart, idx) =>
          `${accumulatedPath}${pathPart}${
              idx < params.length ? encodingFn(params[idx]) : ''
          }`,
      '',
  );

const encode = encodingTagFactory(encodingFn);

export interface FormTypeModel {
  /**
   * unique form id name
   */
  id_name?: string;
  /**
   * to be displayed in menus, tabs, lists, etc.
   */
  short_name?: string;
  /**
   * to be displayed optionally or with smaller text or tooltips
   */
  description?: string;
  fields?: FormInputFieldModel[];
  /**
   * the form submission url
   */
  submit_url?: string;
  /**
   * one of POST, GET, PUT, DELETE, PATCH
   */
  submit_verb?: string;
  /**
   * when true add object id to submit url
   */
  submit_with_object_id?: boolean;
}

export interface FormInputFieldModel {
  /**
   * the name of the parameter expected by endpoints
   */
  name?: string;
  /**
   * a user friendly label for the input field
   */
  short_name?: string;
  /**
   * the description of the input field
   */
  description?: string;
  /**
   * the type of the field
   */
  type?: "bool" | "int" | "float" | "str" | "bigstr" | "jsonstr" | "imagebase64" | "utc_datetime_now" | "user_datetime_now" | "utc_datetime" | "user_datetime" | "admin_user_id" | "agency_user_id" | "consumer_user_id" | "vehicle_id" | "tollrun_id" | "spsession_id" | "device_id" | "email" | "phone" | "state" | "country" | "zipcode" | "vehicle_license" | "vehicle_color" | "vehicle_make" | "vehicle_model" | "vehicle_type" | "vehicle_axle" | "vehicle_year" | "rental_company";
  /**
   * if true the front should not allow editing of this field nor include it in the form submission
   */
  is_read_only?: boolean;
  /**
   * if true the front should not display this field nor include it in the form submission
   */
  is_hidden?: boolean;
  /**
   * if true the front end must pass a valid, non null, value to endpoints
   */
  is_required?: boolean;
  /**
   * if true the front end should only display this field if the boolean field named depends_on is checked
   */
  depends_on?: string;
  /**
   * if true the field becomes required when the depends_on field is set
   */
  is_required_with_depends?: boolean;
  /**
   * when present, the possible string values to select from
   */
  str_values?: string[];
  /**
   * when present, indicates the endpoint to retrieve values by passing the value of depends_on
   */
  url_values?: string;
  /**
   * when present, indicates the attribute of the data where the array of values is found
   */
  url_values_array?: string;
  /**
   * when present, indicates the value of the depends_on field matching the array of values being returned
   */
  url_values_value?: string;
  /**
   * when present, sets the initial value of the field
   */
  initial_value?: string;
  /**
   * when present, sets the minimum value of the field
   */
  min_value?: string;
  /**
   * when present, sets the maximum value of the field
   */
  max_value?: string;
  /**
   * when present, sets the minimum length of the field, either a string length or number of elements on a list
   */
  min_length?: string;
  /**
   * when present, sets the maximum length of the field, either a string length or number of elements on a list
   */
  max_length?: string;
  /**
   * true if a list (array) of elements is expected instead of a single element
   */
  is_list?: boolean;
}

export interface UsersModel {
  /**
   * Unique GeoToll consumer id
   */
  id?: number;
  /**
   * Email address
   */
  email?: string;
  /**
   * First name
   */
  fname?: string;
  /**
   * Last name
   */
  lname?: string;
  /**
   * Telephone number
   */
  phone?: string;
  /**
   * Pending, Active, Inactive, Deleted
   */
  status?: string;
  /**
   * When True the consumer must change password
   */
  password_change_required?: boolean;
  /**
   * NOT CURRENTLY IN USE: The id of the last announcement displayed to the consumer
   */
  last_announcement_seen?: number;
  /**
   * True when the consumer is a subuser of another consumer
   */
  subuser?: boolean;
  /**
   * A Unique GeoToll consumer id or 0 if the consumer is not a subuser
   */
  main_user_id?: number;
  /**
   * The relation between this consumer and the main user, Spouse, Child, Friend or Other
   */
  relation?: string;
  /**
   * Street address line 1
   */
  address1?: string;
  /**
   * Street address line 2
   */
  address2?: string;
  /**
   * City
   */
  city?: string;
  /**
   * State
   */
  state?: string;
  /**
   * Postal code
   */
  zipcode?: string;
  /**
   * Country
   */
  country?: string;
  /**
   * User time zone
   */
  utz?: string;
  /**
   * the id of the active toll run of this user, or null of the user is not currently in a toll run
   */
  tollrun_id?: number;
  /**
   * the id of the vehicle in a toll run with this user, or null if the user is not currently in a toll run
   */
  tollrun_vehicle_id?: number;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  created_at?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  updated_at?: string;
}

export interface UserDebugStatusModel {
  /**
   * The user id
   */
  user_id?: number;
  /**
   * True if debugging user, False otherwise
   */
  is_debugging?: boolean;
}

export interface UserApplogItem {
  /**
   * Unique id of the log entry
   */
  id?: number;
  /**
   * The user id
   */
  user_id?: number;
  /**
   * The logged entry
   */
  msg?: string;
  /**
   * Usertime when log was uploaded Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  usertime?: string;
  /**
   * UTC time when log was uploaded Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  created_at?: string;
}

export interface UserApplogPostResponse {
  /**
   * when true the client should should continue sending logs, otherwise the client should stop logging
   */
  continue_log?: boolean;
  /**
   * Result in human readable format
   */
  message?: string;
  /**
   * The HTTP response status code
   */
  http_code?: number;
}

export interface UserLoginAdditionalResponseModel {
  /**
   * set when consumer is required to verify email address using /emailverify POST
   */
  verify_email_address?: boolean;
  /**
   * set when consumer is required to change password using /password POST
   */
  password_change_required?: boolean;
}

export interface UserLoginResponseModel {
  /**
   * the user record
   */
  user?: UsersModel;
  /**
   * the access token
   */
  token?: string;
  /**
   * the refresh token
   */
  ref_token?: string;
  /**
   * active toll run, if one exists
   */
  active_toll_run?: TollrunItemModel;
}

export interface TollrunItemModel {
  /**
   * toll run id
   */
  id?: number;
  /**
   * user id id
   */
  user_id?: number;
  /**
   * vehicle id
   */
  vehicle_id?: number;
  /**
   * device id
   */
  device_id?: string;
  /**
   * version of the app that started the toll run
   */
  appversion?: string;
  /**
   * Number of passengers, '1', '2', or '3+'
   */
  numpass?: string;
  /**
   * True if the tollrun is ongoing, False otherwise
   */
  is_active?: boolean;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM user local timestamp
   */
  usertime?: string;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM UTC timestamp
   */
  created_at?: string;
}

export interface PushTokenModel {
  /**
   * user id
   */
  uid?: number;
  /**
   * Unique device id
   */
  device_id?: string;
  /**
   * OS name, one of: iOS,Android
   */
  os_name?: string;
  /**
   * Push Notification Token
   */
  token?: string;
}

export interface TollrunConditionsModel {
  /**
   * Minimum balance
   */
  min_balance?: number;
  /**
   * True when the consumer has custom conditions
   */
  is_custom?: boolean;
}

export interface VehicleModel {
  id?: number;
  status?: string;
  active?: boolean;
  user_id?: number;
  state?: string;
  tag?: string;
  make?: string;
  model?: string;
  year?: number;
  color?: string;
  axle?: string;
  vtype?: string;
  electric?: boolean;
  rental?: boolean;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  rental_start?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  rental_end?: string;
  rental_company?: string;
  /**
   * the id of the active toll run of this vehicle, or null of the vehicle is not currently in a toll run
   */
  tollrun_id?: number;
  /**
   * the id of the user in a toll run with this vehicle, or null if the vehicle is not currently in a toll run
   */
  tollrun_user_id?: number;
  transponder_id?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  created_at?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  updated_at?: string;
  tagimage?: string;
}

export interface BalanceplusResponseModel {
  /**
   * the balance
   */
  balance?: string;
  /**
   * the active credit card, if any
   */
  active_card?: CreditCardItemModel;
  /**
   * True if recurring charges are enabled, False otherwise
   */
  recurr_enabled?: boolean;
  /**
   * Non negative threshold amount under which recurring_charge is charged
   */
  min_balance?: number;
  /**
   * Positive recurring charge amount
   */
  recurring_charge?: number;
}

export interface CreditCardItemModel {
  /**
   * GeoToll credit card id
   */
  id?: number;
  /**
   * number of the card, always increasing, possibly with gaps where cards were deleted
   */
  card_num?: number;
  /**
   * nickname of the credit card
   */
  card_nickname?: string;
  /**
   * credit card customer id at stripe
   */
  stripe_cust_id?: string;
  /**
   * set for the active / selected credit card
   */
  active?: boolean;
  /**
   * JSON encoded reply from stripe
   */
  cjson?: string;
  /**
   * timestamp when card was added
   */
  created_at?: string;
  /**
   * timestamp when card was last updated
   */
  updated_at?: string;
}

export interface CardActivityModel {
  /**
   * activity id
   */
  id?: number;
  /**
   * balance
   */
  balance?: string;
  /**
   * activity
   */
  activity?: string;
  /**
   * type of note
   */
  ntype?: string;
  /**
   * GeoToll credit card id
   */
  card_id?: string;
  /**
   * timestamp when activity was captured
   */
  created_at?: string;
}

export interface AccessToken {
  token?: string;
}

export interface TollrunGetUpdatesResponseModel {
  tollrun?: TollrunItemModel;
  updates?: TollrunUpdateItemModel[];
}

export interface TollrunUpdateItemModel {
  /**
   * version of the app after update
   */
  appversion?: string;
  /**
   * value of: Number of passengers, '1', '2', or '3+' after update
   */
  numpass?: string;
  /**
   * True if this update changed the version of the app, false otherwise
   */
  appversion_updated?: boolean;
  /**
   * True if this update changed the number of passengers, false otherwise
   */
  numpass_updated?: boolean;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM UTC timestamp
   */
  created_at?: string;
}

export interface TollrunMinAppVersionModel {
  /**
   * Minimum version of the app required to create toll runs and toll run gps logs
   */
  min_app_version_number?: number;
}

export interface GpslogPostPayloadModel {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
  /**
   * a toll run id created with the / post endpoint
   */
  tollrun_id: number;
  /**
   * log sequence number unique in the toll run, starting from 1 and incrementing by 1
   */
  sequence: number;
  /**
   * one of the priority modes: low,high
   */
  gps_priority: string;
  /**
   * boolean value True when inside the local geofence, False otherwise
   */
  inside_local_geofence: boolean;
  /**
   * GPS in string format as "longitude latitude"
   */
  longlat: string;
  /**
   * GPS altitude in meters
   */
  altitude: number;
  /**
   * GPS radius in meters
   */
  radius: number;
  /**
   * device bearing, angle in degrees from 0 to 360, -1 when not available
   */
  bearing: number;
  /**
   * device speed, in meters per second, -1 when not available
   */
  speed: number;
  /**
   * battery level percentage
   */
  bs: number;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM user local timestamp Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  usertime?: string;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM UTC timestamp Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  created_at?: string;
}

export interface GpslogPostResponseModel {
  /**
   * Toll run id, returned on success
   */
  tollrun_id?: number;
  /**
   * log sequence number, returned on success
   */
  sequence?: number;
  /**
   * when true the client should should continue sending logs, otherwise the client should stop logging, returned on success
   */
  continue_log?: boolean;
  /**
   * latest version of the local geofence, returned on success
   */
  local_geofence_version?: string;
  /**
   * Returned and set to True when the toll run parameters are not passed in the JSON body of the request
   */
  use_json_in_body?: boolean;
  /**
   * Returned and set to True when the toll run id is invalid or the toll run has ended
   */
  invalid_tollrun?: boolean;
  /**
   * Returned and set to True when the active toll run contains an expired app version
   */
  invalid_appversion?: boolean;
  /**
   * Returned and set to True when the gps_priority parameter is invalid
   */
  invalid_gps_priority?: boolean;
  /**
   * Returned and set to True when the format of either date parameter is invalid
   */
  invalid_date_format?: boolean;
  /**
   * Returned and set to True when sequence is negative
   */
  invalid_sequence_number?: boolean;
  /**
   * Returned and set to True when battery percentage is is negative or above 100
   */
  invalid_battery_percentage?: boolean;
  /**
   * Returned and set to True when bearing is negative or greater or equal to 360
   */
  invalid_bearing?: boolean;
  /**
   * Returned and set to True when speed is negative and different than -1
   */
  invalid_speed?: boolean;
  /**
   * Returned and set to True when radius is negative
   */
  invalid_radius?: boolean;
  /**
   * Returned and set to True when the longlat string does not parse to valid longitude and latitude values
   */
  invalid_longlat?: boolean;
}

export interface SplitSessionUserInfoItem {
  /**
   * split session id
   */
  id?: number;
  /**
   * split session id, deprecated field name, replace with id
   */
  sid?: number;
  /**
   * split session name
   */
  name?: string;
  /**
   * one of mainuser,joineduser
   */
  usertype?: string;
  /**
   * user status in split session
   */
  status?: string;
  /**
   * the user id
   */
  user_id?: number;
  /**
   * first name
   */
  fname?: string;
  /**
   * last name
   */
  lname?: string;
  /**
   * email address
   */
  email?: string;
  /**
   * phone number
   */
  phone?: string;
  /**
   * session start timestamp
   */
  sstart?: string;
  /**
   * session end timestamp or null if session is not closed
   */
  send?: string;
}

export interface SplitSessionInfo {
  /**
   * split session id
   */
  id?: number;
  /**
   * split session name
   */
  name?: string;
  /**
   * status of the split session
   */
  status?: string;
  /**
   * the user id of the main user
   */
  user_id?: number;
  /**
   * session start timestamp
   */
  sstart?: string;
  /**
   * session end timestamp or null if session is not closed
   */
  send?: string;
}

export interface SplitSessionShortInfo {
  /**
   * split session id
   */
  id?: number;
  /**
   * split session name
   */
  name?: string;
}

export interface ApplogGetResponse {
  data?: ApplogGetResponseItem[];
}

export interface ApplogGetResponseItem {
  /**
   * Unique id of the log entry
   */
  id?: number;
  /**
   * The user id
   */
  user_id?: number;
  /**
   * The logged entry
   */
  msg?: string;
  /**
   * Usertime when log was uploaded Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  usertime?: string;
  /**
   * UTC time when log was uploaded Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  created_at?: string;
}

export interface ApplogPostResponse {
  /**
   * human readable endpoint outcome
   */
  message?: string;
  /**
   * 100 or 200 for success, 400, 600 for fail, will be changed when responses are standardized throughout the API
   */
  status?: number;
  /**
   * when true the client should should continue sending logs, otherwise the client should stop logging
   */
  continue_log?: boolean;
}

export interface TollplazaFeatureCollection {
  /**
   * GeoJSON value is "FeatureCollection"
   */
  type?: string;
  features?: TollplazaPointFeature[];
}

export interface TollplazaPointFeature {
  /**
   * GeoJSON value is "Feature"
   */
  type?: string;
  geometry?: GeoJSONPointGeometry;
  properties?: TollplazaFeatureProperties;
}

export interface GeoJSONPointGeometry {
  /**
   * GeoJSON value is "Point"
   */
  type?: string;
  /**
   * longitude, latitude order
   */
  coordinates?: number[];
}

export interface TollplazaFeatureProperties {
  id?: number;
  name?: string;
  agency_name?: string;
  detail?: string;
  location?: Lnglat;
  calc_type?: string;
  agency_id?: number;
  status?: string;
  is_free?: boolean;
  image_file_name?: string;
  image_type?: string;
  parts?: TollplazaPartsInTollplazaFeatureCollection;
  /**
   * UTC ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZ) as in 2019-05-27T12:34:56.789+05:00
   */
  created_at?: string;
  /**
   * UTC ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZ) as in 2019-05-27T12:34:56.789+05:00
   */
  updated_at?: string;
}

export interface Lnglat {
  /**
   * longitude
   */
  lng?: number;
  /**
   * latitude
   */
  lat?: number;
}

export interface TollplazaPartsInTollplazaFeatureCollection {
  /**
   * GeoJSON value is "FeatureCollection"
   */
  type?: string;
  features?: TollplazaPartInTollplazaPolygonFeature[];
}

export interface TollplazaPartInTollplazaPolygonFeature {
  /**
   * GeoJSON value is "Feature"
   */
  type?: string;
  geometry?: GeoJSONPolygonGeometry;
  properties?: TollplazaPartsInTollplazaFeatureProperties;
}

export interface GeoJSONPolygonGeometry {
  /**
   * GeoJSON value is "Polygon"
   */
  type?: string;
  coordinates?: number[][][];
}

export type TollplazaPartsInTollplazaFeatureProperties = TollplazaPartsFeatureProperties & {
  /**
   * polygon fill color
   */
  fill?: string;
  /**
   * polygon fill opacity (0-1)
   */
  "fill-opacity"?: string;
  /**
   * polygon stroke (line) color
   */
  stroke?: string;
  /**
   * polygon stroke opacity (0-1)
   */
  "stroke-opacity"?: string;
  /**
   * polygon stroke width (line thickness) in pixels
   */
  "stroke-width"?: string;
};

export interface TollplazaPartsFeatureProperties {
  id?: number;
  tollplaza_id?: number;
  charge?: boolean;
  description?: string;
  bearing_ranges?: string;
  start_point?: PlazaPartStartPointFeature;
  mid_point?: PlazaPartMidPointFeature;
  end_point?: PlazaPartEndPointFeature;
}

export interface PlazaPartStartPointFeature {
  /**
   * GeoJSON value is "Feature"
   */
  type?: string;
  geometry?: GeoJSONPointGeometry;
}

export interface PlazaPartMidPointFeature {
  /**
   * GeoJSON value is "Feature"
   */
  type?: string;
  geometry?: GeoJSONPointGeometry;
}

export interface PlazaPartEndPointFeature {
  /**
   * GeoJSON value is "Feature"
   */
  type?: string;
  geometry?: GeoJSONPointGeometry;
}

export interface AddTollPlazaResponse {
  /**
   * the id of the newly added toll plaza, or -1 in case of failure
   */
  tollplaza_id?: number;
  /**
   * true if a new toll plaza was created, false otherwise
   */
  OK?: boolean;
}

export interface LocalGeofenceReponseModel {
  /**
   * System generated automatically incrementing version number
   */
  version?: number;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM UTC timestamp
   */
  created_at?: string;
  /**
   * GeoJSON feature collection containing the local geofence polygon hierarchy
   */
  localgeofence?: string;
}

export interface ReportTypeListModel {
  reports?: ReportTypeModel;
}

export interface ReportTypeModel {
  /**
   * uniquely identifies the type of report and is used as input for other endpoints
   */
  id?: number;
  /**
   * to be displayed in menus, tabs, lists, etc. possibly followed by the word "report"
   */
  short_name?: string;
  /**
   * to be displayed optionally or with smaller text or tooltips
   */
  description?: string;
  /**
   * when present, indicates that this type of report only works for this custom agency id, delivered only to admin users
   */
  custom_to_agency_id?: number;
  /**
   * list of agency ids for which this report is currently available, delivered only to admin users
   */
  available_to_agency_ids?: number[];
  input?: ReportTypeInputModel;
  output_input?: ReportTypeOutputInputModel;
  output?: ReportTypeOutputModel[];
}

export interface ReportTypeInputModel {
  /**
   * when true the input is saved and its id can be used as input for other endpoints
   */
  is_stored?: boolean;
  fields?: ReportInputFieldModel[];
}

export interface ReportInputFieldModel {
  /**
   * the name of the parameter expected by endpoints
   */
  name?: string;
  /**
   * a user friendly label for the input field
   */
  short_name?: string;
  /**
   * the description of the input field
   */
  description?: string;
  /**
   * if true the front must pass a valid, non null, value to endpoints
   */
  is_required?: boolean;
  /**
   * the type of the field
   */
  type?: "str" | "bigstr" | "jsonstr" | "int" | "float" | "bool" | "file" | "utc_datetime_now" | "user_datetime_now" | "utc_datetime" | "user_datetime" | "utc_datetime_start" | "user_datetime_start" | "utc_datetime_end" | "user_datetime_end" | "admin_user_id" | "agency_user_id" | "consumer_user_id" | "vehicle_id" | "tollrun_id" | "spsession_id" | "device_id";
  /**
   * when present, sets the initial value of the field
   */
  initial_value?: string;
  /**
   * when the type of the input is 'file' this indicates the expected type of the file
   */
  file_type?: "CSV";
  /**
   * a short example of an acceptable value for this field, like the contents of a CSV file
   */
  sample?: string;
  /**
   * true if a list (array) of elements is expected instead of a single element
   */
  is_list?: boolean;
}

export interface ReportTypeOutputInputModel {
  fields?: ReportInputFieldModel[];
}

export interface ReportTypeOutputModel {
  /**
   * the output id to be used with other endpoints
   */
  id?: number;
  /**
   * to be displayed in menus, tabs, lists, etc
   */
  name?: string;
  /**
   * optionally to be displayed when focused on or hovered over
   */
  description?: string;
  /**
   * currently only 'CSV' is returned, with the intent of saving a file
   */
  output_type?: string;
  /**
   * gives the user a short sample of the output CSV file, when output_type is 'CSV'
   */
  csv_file_content_sample?: string;
  /**
   * if true the front should only request this report after the user presses a submit button
   */
  requires_submit?: boolean;
  input?: ReportTypeInputForOutputModel;
}

export interface ReportTypeInputForOutputModel {
  fields?: ReportInputFieldModel[];
}

export interface AdminUserTokenRefTokenModel {
  /**
   * the admin user record
   */
  user?: AdminUsersModel;
  /**
   * the access token
   */
  token?: string;
  /**
   * the refresh token
   */
  ref_token?: string;
}

export interface AdminUsersModel {
  id?: number;
  email?: string;
  fname?: string;
  lname?: string;
  status?: string;
  password_change_required?: boolean;
  created_by?: number;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  created_at?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  updated_at?: string;
}

export interface PassengerCount {
  /**
   * id of the passenger count session
   */
  id?: number;
  /**
   * User id
   */
  user_id?: number;
  /**
   * number of passengers selected by the consumer
   */
  requested_number?: number;
  /**
   * the last GPS log sent by the app during the passenger count session
   */
  last_gps_log?: string;
  /**
   * total number of frames analysed in this count
   */
  analysed_frame_count?: number;
  /**
   * maximum number of good detected faces so far
   */
  max_good_detected_faces?: number;
  /**
   * maximum number of total detected faces so far
   */
  max_total_detected_faces?: number;
  /**
   * unmodified response given by the external API (AWS rekognition)
   */
  raw_api_response?: string;
  /**
   * number of passengers detected by the server
   */
  detected_number?: number;
  /**
   * the last bitmap analysed / used for a decision
   */
  bitmap?: string;
  /**
   * the width of bitmap image
   */
  bitmap_width?: number;
  /**
   * the height of bitmap image
   */
  bitmap_height?: number;
  /**
   * number of passengers ultimately used on toll run associated with this session id, if any
   */
  tollrun_number?: number;
  /**
   * toll run id that was changed using this session id, if any
   */
  tollrun_id?: number;
  /**
   * toll run update id that was changed using this session id, if any
   */
  tollrun_update_id?: number;
  /**
   * UTC time when the this session was created upon receipt of its first frame Shortened ISO 8601 format ready for display (yyyy-MM-dd HH:mm:ss) as in 2019-05-27 12:34:56
   */
  created_at?: string;
  /**
   * the user's first name
   */
  fname?: string;
  /**
   * the user's last name
   */
  lname?: string;
  /**
   * the user's email address
   */
  email?: string;
  /**
   * the user's phone number
   */
  phone?: string;
}

export interface AgencyUserTokenRefTokenAgencyModel {
  /**
   * the agency user record
   */
  user?: AgencyUsersModel;
  /**
   * the access token
   */
  token?: string;
  /**
   * the refresh token
   */
  ref_token?: string;
  /**
   * the agency record
   */
  agency?: AgencyModel;
}

export interface AgencyUsersModel {
  id?: number;
  email?: string;
  fname?: string;
  lname?: string;
  status?: string;
  password_change_required?: boolean;
  added_by_id?: number;
  primary_user?: boolean;
  agency_id?: number;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  created_at?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  updated_at?: string;
}

export interface AgencyModel {
  id?: number;
  name?: string;
  astate?: string;
  address1?: string;
  address2?: string;
  city?: string;
  state?: boolean;
  zip?: number;
  phone?: boolean;
  pfname?: number;
  plname?: string;
  agency_id?: string;
  agency_type?: string;
  hex?: string;
  abinary?: string;
  decimal?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  created_at?: string;
  /**
   * UTC Date MM/DD/YYYY HH:MM AM/PM
   */
  updated_at?: string;
}

/**
 * When a mask can't be parsed
 */
export type ParseErrorResponse = void;

/**
 * When any error occurs on mask
 */
export type MaskErrorResponse = void;

export interface PostAdminUserLoginQueryParams {
  /**
   * Email address
   */
  email: string;
  /**
   * Password
   */
  password: string;
}

export type PostAdminUserLoginProps = Omit<MutateProps<AdminUserTokenRefTokenModel, void, PostAdminUserLoginQueryParams, void, void>, "path" | "verb">;

/**
 * Login for users in the Administrator role
 */
export const PostAdminUserLogin = (props: PostAdminUserLoginProps) => (
  <Mutate<AdminUserTokenRefTokenModel, void, PostAdminUserLoginQueryParams, void, void>
    verb="POST"
    path={encode`/admin/login`}
    
    {...props}
  />
);

export type UsePostAdminUserLoginProps = Omit<UseMutateProps<AdminUserTokenRefTokenModel, void, PostAdminUserLoginQueryParams, void, void>, "path" | "verb">;

/**
 * Login for users in the Administrator role
 */
export const usePostAdminUserLogin = (props: UsePostAdminUserLoginProps) => useMutate<AdminUserTokenRefTokenModel, void, PostAdminUserLoginQueryParams, void, void>("POST", encode`/admin/login`, props);


export interface GetAdminPassengerCountsQueryParams {
  /**
   * optional user id filter
   */
  uid?: string;
  /**
   * optional passenger count session id filter
   */
  sid?: string;
  /**
   * Start date or date time
   */
  sdate?: string;
  /**
   * End date or date time
   */
  edate?: string;
  /**
   * include bitmap information when available
   */
  include_bitmaps?: boolean;
}

export type GetAdminPassengerCountsProps = Omit<GetProps<PassengerCount[], void, GetAdminPassengerCountsQueryParams, void>, "path">;

/**
 * Retrieves passenger count session history
 */
export const GetAdminPassengerCounts = (props: GetAdminPassengerCountsProps) => (
  <Get<PassengerCount[], void, GetAdminPassengerCountsQueryParams, void>
    path={encode`/admin/passenger_counts`}
    
    {...props}
  />
);

export type UseGetAdminPassengerCountsProps = Omit<UseGetProps<PassengerCount[], void, GetAdminPassengerCountsQueryParams, void>, "path">;

/**
 * Retrieves passenger count session history
 */
export const useGetAdminPassengerCounts = (props: UseGetAdminPassengerCountsProps) => useGet<PassengerCount[], void, GetAdminPassengerCountsQueryParams, void>(encode`/admin/passenger_counts`, props);


export type PostAddAgencyProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAddAgency = (props: PostAddAgencyProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/add`}
    
    {...props}
  />
);

export type UsePostAddAgencyProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAddAgency = (props: UsePostAddAgencyProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/add`, props);


export type PostAddUserProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAddUser = (props: PostAddUserProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/adduser`}
    
    {...props}
  />
);

export type UsePostAddUserProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAddUser = (props: UsePostAddUserProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/adduser`, props);


export type PostDelAgencyProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDelAgency = (props: PostDelAgencyProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/del`}
    
    {...props}
  />
);

export type UsePostDelAgencyProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDelAgency = (props: UsePostDelAgencyProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/del`, props);


export type PostDelUserProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDelUser = (props: PostDelUserProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/deluser`}
    
    {...props}
  />
);

export type UsePostDelUserProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDelUser = (props: UsePostDelUserProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/deluser`, props);


export type PostEditAgencyProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostEditAgency = (props: PostEditAgencyProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/edit`}
    
    {...props}
  />
);

export type UsePostEditAgencyProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostEditAgency = (props: UsePostEditAgencyProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/edit`, props);


export type PostEditUserProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostEditUser = (props: PostEditUserProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/edituser`}
    
    {...props}
  />
);

export type UsePostEditUserProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostEditUser = (props: UsePostEditUserProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/edituser`, props);


export type PostListAgencyProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostListAgency = (props: PostListAgencyProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/list`}
    
    {...props}
  />
);

export type UsePostListAgencyProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostListAgency = (props: UsePostListAgencyProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/list`, props);


export type PostListUserProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostListUser = (props: PostListUserProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/listuser`}
    
    {...props}
  />
);

export type UsePostListUserProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostListUser = (props: UsePostListUserProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/listuser`, props);


export interface PostAgencyUserLoginQueryParams {
  /**
   * Email address
   */
  email: string;
  /**
   * Password
   */
  password: string;
}

export type PostAgencyUserLoginProps = Omit<MutateProps<AgencyUserTokenRefTokenAgencyModel, void, PostAgencyUserLoginQueryParams, void, void>, "path" | "verb">;

/**
 * Login for Agency role users
 */
export const PostAgencyUserLogin = (props: PostAgencyUserLoginProps) => (
  <Mutate<AgencyUserTokenRefTokenAgencyModel, void, PostAgencyUserLoginQueryParams, void, void>
    verb="POST"
    path={encode`/agency/login`}
    
    {...props}
  />
);

export type UsePostAgencyUserLoginProps = Omit<UseMutateProps<AgencyUserTokenRefTokenAgencyModel, void, PostAgencyUserLoginQueryParams, void, void>, "path" | "verb">;

/**
 * Login for Agency role users
 */
export const usePostAgencyUserLogin = (props: UsePostAgencyUserLoginProps) => useMutate<AgencyUserTokenRefTokenAgencyModel, void, PostAgencyUserLoginQueryParams, void, void>("POST", encode`/agency/login`, props);


export type PostTransRepProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTransRep = (props: PostTransRepProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/report`}
    
    {...props}
  />
);

export type UsePostTransRepProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTransRep = (props: UsePostTransRepProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/report`, props);


export type PostAgencySimulateProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAgencySimulate = (props: PostAgencySimulateProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/simulate`}
    
    {...props}
  />
);

export type UsePostAgencySimulateProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAgencySimulate = (props: UsePostAgencySimulateProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/simulate`, props);


export type PostUsersRepProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostUsersRep = (props: PostUsersRepProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/agency/usersreport`}
    
    {...props}
  />
);

export type UsePostUsersRepProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostUsersRep = (props: UsePostUsersRepProps) => useMutate<void, unknown, void, void, void>("POST", encode`/agency/usersreport`, props);


export interface GetCreditCardRootQueryParams {
  /**
   * Set to True to retrieve json data already parsed
   */
  json_parsed?: boolean;
}

export type GetCreditCardRootProps = Omit<GetProps<CreditCardItemModel[], void, GetCreditCardRootQueryParams, void>, "path">;

/**
 * Get the list of credit cards associated with the consumer
 */
export const GetCreditCardRoot = (props: GetCreditCardRootProps) => (
  <Get<CreditCardItemModel[], void, GetCreditCardRootQueryParams, void>
    path={encode`/creditcard/`}
    
    {...props}
  />
);

export type UseGetCreditCardRootProps = Omit<UseGetProps<CreditCardItemModel[], void, GetCreditCardRootQueryParams, void>, "path">;

/**
 * Get the list of credit cards associated with the consumer
 */
export const useGetCreditCardRoot = (props: UseGetCreditCardRootProps) => useGet<CreditCardItemModel[], void, GetCreditCardRootQueryParams, void>(encode`/creditcard/`, props);


export interface PostCreditCardRootQueryParams {
  /**
   * Token returned by stripe
   */
  stripeToken: string;
  /**
   * Object (not a string) with card setup data from stripe
   */
  cdata: string;
  /**
   * Card nickname
   */
  card_nickname: string;
  /**
   * Optional initial amount to be charged
   */
  amount?: string;
  /**
   * Set to True to retrieve json data already parsed
   */
  json_parsed?: boolean;
}

export type PostCreditCardRootProps = Omit<MutateProps<CreditCardItemModel, void, PostCreditCardRootQueryParams, void, void>, "path" | "verb">;

/**
 * Add a credit card to a consumer and optionally make an initial charge
 */
export const PostCreditCardRoot = (props: PostCreditCardRootProps) => (
  <Mutate<CreditCardItemModel, void, PostCreditCardRootQueryParams, void, void>
    verb="POST"
    path={encode`/creditcard/`}
    
    {...props}
  />
);

export type UsePostCreditCardRootProps = Omit<UseMutateProps<CreditCardItemModel, void, PostCreditCardRootQueryParams, void, void>, "path" | "verb">;

/**
 * Add a credit card to a consumer and optionally make an initial charge
 */
export const usePostCreditCardRoot = (props: UsePostCreditCardRootProps) => useMutate<CreditCardItemModel, void, PostCreditCardRootQueryParams, void, void>("POST", encode`/creditcard/`, props);


export interface GetCreditCardActiveRootQueryParams {
  /**
   * Set to True to retrieve json data already parsed
   */
  json_parsed?: boolean;
}

export type GetCreditCardActiveRootProps = Omit<GetProps<CreditCardItemModel, void, GetCreditCardActiveRootQueryParams, void>, "path">;

/**
 * Get the consumer's active credit card if one exists
 */
export const GetCreditCardActiveRoot = (props: GetCreditCardActiveRootProps) => (
  <Get<CreditCardItemModel, void, GetCreditCardActiveRootQueryParams, void>
    path={encode`/creditcard/active`}
    
    {...props}
  />
);

export type UseGetCreditCardActiveRootProps = Omit<UseGetProps<CreditCardItemModel, void, GetCreditCardActiveRootQueryParams, void>, "path">;

/**
 * Get the consumer's active credit card if one exists
 */
export const useGetCreditCardActiveRoot = (props: UseGetCreditCardActiveRootProps) => useGet<CreditCardItemModel, void, GetCreditCardActiveRootQueryParams, void>(encode`/creditcard/active`, props);


export interface PostCreditCardActiveByIdQueryParams {
  /**
   * Set to True to retrieve json data already parsed
   */
  json_parsed?: boolean;
}

export interface PostCreditCardActiveByIdPathParams {
  id: number
}

export type PostCreditCardActiveByIdProps = Omit<MutateProps<CreditCardItemModel, void, PostCreditCardActiveByIdQueryParams, void, PostCreditCardActiveByIdPathParams>, "path" | "verb"> & PostCreditCardActiveByIdPathParams;

/**
 * Assign active status to one of the consumer's credit cards
 */
export const PostCreditCardActiveById = ({id, ...props}: PostCreditCardActiveByIdProps) => (
  <Mutate<CreditCardItemModel, void, PostCreditCardActiveByIdQueryParams, void, PostCreditCardActiveByIdPathParams>
    verb="POST"
    path={encode`/creditcard/active/${id}`}
    
    {...props}
  />
);

export type UsePostCreditCardActiveByIdProps = Omit<UseMutateProps<CreditCardItemModel, void, PostCreditCardActiveByIdQueryParams, void, PostCreditCardActiveByIdPathParams>, "path" | "verb"> & PostCreditCardActiveByIdPathParams;

/**
 * Assign active status to one of the consumer's credit cards
 */
export const usePostCreditCardActiveById = ({id, ...props}: UsePostCreditCardActiveByIdProps) => useMutate<CreditCardItemModel, void, PostCreditCardActiveByIdQueryParams, void, PostCreditCardActiveByIdPathParams>("POST", (paramsInPath: PostCreditCardActiveByIdPathParams) => encode`/creditcard/active/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface GetUserBalanceQueryParams {
  /**
   * Set to True to retrieve json data already parsed
   */
  json_parsed?: boolean;
}

export type GetUserBalanceProps = Omit<GetProps<BalanceplusResponseModel, void, GetUserBalanceQueryParams, void>, "path">;

/**
 * Retrieve the current balance, active credit card, and recurring payment settings of a consumer user
 */
export const GetUserBalance = (props: GetUserBalanceProps) => (
  <Get<BalanceplusResponseModel, void, GetUserBalanceQueryParams, void>
    path={encode`/creditcard/balanceplus`}
    
    {...props}
  />
);

export type UseGetUserBalanceProps = Omit<UseGetProps<BalanceplusResponseModel, void, GetUserBalanceQueryParams, void>, "path">;

/**
 * Retrieve the current balance, active credit card, and recurring payment settings of a consumer user
 */
export const useGetUserBalance = (props: UseGetUserBalanceProps) => useGet<BalanceplusResponseModel, void, GetUserBalanceQueryParams, void>(encode`/creditcard/balanceplus`, props);


export interface GetCreditCardPaymentsRootQueryParams {
  /**
   * Start date YYYY-MM-DD
   */
  sdate?: string;
  /**
   * End date YYYY-MM-DD
   */
  edate?: string;
}

export type GetCreditCardPaymentsRootProps = Omit<GetProps<CardActivityModel[], void, GetCreditCardPaymentsRootQueryParams, void>, "path">;

/**
 * Get the payment history of all credit cards
 */
export const GetCreditCardPaymentsRoot = (props: GetCreditCardPaymentsRootProps) => (
  <Get<CardActivityModel[], void, GetCreditCardPaymentsRootQueryParams, void>
    path={encode`/creditcard/payments`}
    
    {...props}
  />
);

export type UseGetCreditCardPaymentsRootProps = Omit<UseGetProps<CardActivityModel[], void, GetCreditCardPaymentsRootQueryParams, void>, "path">;

/**
 * Get the payment history of all credit cards
 */
export const useGetCreditCardPaymentsRoot = (props: UseGetCreditCardPaymentsRootProps) => useGet<CardActivityModel[], void, GetCreditCardPaymentsRootQueryParams, void>(encode`/creditcard/payments`, props);


export interface GetCreditCardPaymentsByIdQueryParams {
  /**
   * Start date YYYY-MM-DD
   */
  sdate?: string;
  /**
   * End date YYYY-MM-DD
   */
  edate?: string;
}

export interface GetCreditCardPaymentsByIdPathParams {
  id: number
}

export type GetCreditCardPaymentsByIdProps = Omit<GetProps<CardActivityModel[], void, GetCreditCardPaymentsByIdQueryParams, GetCreditCardPaymentsByIdPathParams>, "path"> & GetCreditCardPaymentsByIdPathParams;

/**
 * Get the payment history of one credit card
 */
export const GetCreditCardPaymentsById = ({id, ...props}: GetCreditCardPaymentsByIdProps) => (
  <Get<CardActivityModel[], void, GetCreditCardPaymentsByIdQueryParams, GetCreditCardPaymentsByIdPathParams>
    path={encode`/creditcard/payments/${id}`}
    
    {...props}
  />
);

export type UseGetCreditCardPaymentsByIdProps = Omit<UseGetProps<CardActivityModel[], void, GetCreditCardPaymentsByIdQueryParams, GetCreditCardPaymentsByIdPathParams>, "path"> & GetCreditCardPaymentsByIdPathParams;

/**
 * Get the payment history of one credit card
 */
export const useGetCreditCardPaymentsById = ({id, ...props}: UseGetCreditCardPaymentsByIdProps) => useGet<CardActivityModel[], void, GetCreditCardPaymentsByIdQueryParams, GetCreditCardPaymentsByIdPathParams>((paramsInPath: GetCreditCardPaymentsByIdPathParams) => encode`/creditcard/payments/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PostCreditCardPaymentsByIdQueryParams {
  /**
   * Amount to be charged
   */
  amount: string;
  /**
   * Set to True to retrieve json data already parsed
   */
  json_parsed?: boolean;
}

export interface PostCreditCardPaymentsByIdPathParams {
  id: number
}

export type PostCreditCardPaymentsByIdProps = Omit<MutateProps<BalanceplusResponseModel, unknown, PostCreditCardPaymentsByIdQueryParams, void, PostCreditCardPaymentsByIdPathParams>, "path" | "verb"> & PostCreditCardPaymentsByIdPathParams;

/**
 * Pay some or all of the consumer's balance using one of their credit cards
 */
export const PostCreditCardPaymentsById = ({id, ...props}: PostCreditCardPaymentsByIdProps) => (
  <Mutate<BalanceplusResponseModel, unknown, PostCreditCardPaymentsByIdQueryParams, void, PostCreditCardPaymentsByIdPathParams>
    verb="POST"
    path={encode`/creditcard/payments/${id}`}
    
    {...props}
  />
);

export type UsePostCreditCardPaymentsByIdProps = Omit<UseMutateProps<BalanceplusResponseModel, unknown, PostCreditCardPaymentsByIdQueryParams, void, PostCreditCardPaymentsByIdPathParams>, "path" | "verb"> & PostCreditCardPaymentsByIdPathParams;

/**
 * Pay some or all of the consumer's balance using one of their credit cards
 */
export const usePostCreditCardPaymentsById = ({id, ...props}: UsePostCreditCardPaymentsByIdProps) => useMutate<BalanceplusResponseModel, unknown, PostCreditCardPaymentsByIdQueryParams, void, PostCreditCardPaymentsByIdPathParams>("POST", (paramsInPath: PostCreditCardPaymentsByIdPathParams) => encode`/creditcard/payments/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type PostListDevicesProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostListDevices = (props: PostListDevicesProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/devices/list`}
    
    {...props}
  />
);

export type UsePostListDevicesProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostListDevices = (props: UsePostListDevicesProps) => useMutate<void, unknown, void, void, void>("POST", encode`/devices/list`, props);


export type PostAddRuleProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAddRule = (props: PostAddRuleProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/add`}
    
    {...props}
  />
);

export type UsePostAddRuleProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAddRule = (props: UsePostAddRuleProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/add`, props);


export type PostAddPricePlanProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAddPricePlan = (props: PostAddPricePlanProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/add2plan`}
    
    {...props}
  />
);

export type UsePostAddPricePlanProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAddPricePlan = (props: UsePostAddPricePlanProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/add2plan`, props);


export type PostChangePPpriorityProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostChangePPpriority = (props: PostChangePPpriorityProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/changep_priority`}
    
    {...props}
  />
);

export type UsePostChangePPpriorityProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostChangePPpriority = (props: UsePostChangePPpriorityProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/changep_priority`, props);


export type PostDeleteRuleProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDeleteRule = (props: PostDeleteRuleProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/delete`}
    
    {...props}
  />
);

export type UsePostDeleteRuleProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDeleteRule = (props: UsePostDeleteRuleProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/delete`, props);


export type PostDisableRuleProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDisableRule = (props: PostDisableRuleProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/disable`}
    
    {...props}
  />
);

export type UsePostDisableRuleProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDisableRule = (props: UsePostDisableRuleProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/disable`, props);


export type PostDisablePlanProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDisablePlan = (props: PostDisablePlanProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/disableplan`}
    
    {...props}
  />
);

export type UsePostDisablePlanProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDisablePlan = (props: UsePostDisablePlanProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/disableplan`, props);


export type PostEnableRuleProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostEnableRule = (props: PostEnableRuleProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/enable`}
    
    {...props}
  />
);

export type UsePostEnableRuleProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostEnableRule = (props: UsePostEnableRuleProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/enable`, props);


export type PostEnablePlanProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostEnablePlan = (props: PostEnablePlanProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/enableplan`}
    
    {...props}
  />
);

export type UsePostEnablePlanProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostEnablePlan = (props: UsePostEnablePlanProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/enableplan`, props);


export type PostExportPlansProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostExportPlans = (props: PostExportPlansProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/export_plans`}
    
    {...props}
  />
);

export type UsePostExportPlansProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostExportPlans = (props: UsePostExportPlansProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/export_plans`, props);


export type PostExportRulesProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostExportRules = (props: PostExportRulesProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/export_rules`}
    
    {...props}
  />
);

export type UsePostExportRulesProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostExportRules = (props: UsePostExportRulesProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/export_rules`, props);


export type PostImportPlansProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostImportPlans = (props: PostImportPlansProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/import_plans`}
    
    {...props}
  />
);

export type UsePostImportPlansProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostImportPlans = (props: UsePostImportPlansProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/import_plans`, props);


export type PostImportRulesProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostImportRules = (props: PostImportRulesProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/import_rules`}
    
    {...props}
  />
);

export type UsePostImportRulesProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostImportRules = (props: UsePostImportRulesProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/import_rules`, props);


export type PostViewRuleProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostViewRule = (props: PostViewRuleProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/list`}
    
    {...props}
  />
);

export type UsePostViewRuleProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostViewRule = (props: UsePostViewRuleProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/list`, props);


export type PostTestDynPlansProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTestDynPlans = (props: PostTestDynPlansProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/test`}
    
    {...props}
  />
);

export type UsePostTestDynPlansProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTestDynPlans = (props: UsePostTestDynPlansProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/test`, props);


export type PostViewPlansProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostViewPlans = (props: PostViewPlansProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/dynrule/viewplan`}
    
    {...props}
  />
);

export type UsePostViewPlansProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostViewPlans = (props: UsePostViewPlansProps) => useMutate<void, unknown, void, void, void>("POST", encode`/dynrule/viewplan`, props);


export type GetFormsRootProps = Omit<GetProps<FormTypeModel[], void, void, void>, "path">;

/**
 * Get a list of all available types of forms in the system
 */
export const GetFormsRoot = (props: GetFormsRootProps) => (
  <Get<FormTypeModel[], void, void, void>
    path={encode`/forms/`}
    
    {...props}
  />
);

export type UseGetFormsRootProps = Omit<UseGetProps<FormTypeModel[], void, void, void>, "path">;

/**
 * Get a list of all available types of forms in the system
 */
export const useGetFormsRoot = (props: UseGetFormsRootProps) => useGet<FormTypeModel[], void, void, void>(encode`/forms/`, props);


export interface GetFormsByNameRootPathParams {
  name: string
}

export type GetFormsByNameRootProps = Omit<GetProps<FormTypeModel, void, void, GetFormsByNameRootPathParams>, "path"> & GetFormsByNameRootPathParams;

/**
 * Get the specifications of the named form
 */
export const GetFormsByNameRoot = ({name, ...props}: GetFormsByNameRootProps) => (
  <Get<FormTypeModel, void, void, GetFormsByNameRootPathParams>
    path={encode`/forms/${name}`}
    
    {...props}
  />
);

export type UseGetFormsByNameRootProps = Omit<UseGetProps<FormTypeModel, void, void, GetFormsByNameRootPathParams>, "path"> & GetFormsByNameRootPathParams;

/**
 * Get the specifications of the named form
 */
export const useGetFormsByNameRoot = ({name, ...props}: UseGetFormsByNameRootProps) => useGet<FormTypeModel, void, void, GetFormsByNameRootPathParams>((paramsInPath: GetFormsByNameRootPathParams) => encode`/forms/${paramsInPath.name}`, {  pathParams: { name }, ...props });


export interface GetGeoFencesRootQueryParams {
  /**
   * Optionally return the configuration associated with the given id instead of the current one
   */
  id?: number;
  /**
   * Optionally return the configuration that was active on the given date instead of the current one
   */
  date?: string;
}

export type GetGeoFencesRootProps = Omit<GetProps<void, void, GetGeoFencesRootQueryParams, void>, "path">;

/**
 * Returns Toll Plaza and Local GeoFence data
 */
export const GetGeoFencesRoot = (props: GetGeoFencesRootProps) => (
  <Get<void, void, GetGeoFencesRootQueryParams, void>
    path={encode`/geofences/`}
    
    {...props}
  />
);

export type UseGetGeoFencesRootProps = Omit<UseGetProps<void, void, GetGeoFencesRootQueryParams, void>, "path">;

/**
 * Returns Toll Plaza and Local GeoFence data
 */
export const useGetGeoFencesRoot = (props: UseGetGeoFencesRootProps) => useGet<void, void, GetGeoFencesRootQueryParams, void>(encode`/geofences/`, props);


export type PostGeoFencesRootProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * Add a new Toll Plaza and Local GeoFence version
 */
export const PostGeoFencesRoot = (props: PostGeoFencesRootProps) => (
  <Mutate<void, void, void, void, void>
    verb="POST"
    path={encode`/geofences/`}
    
    {...props}
  />
);

export type UsePostGeoFencesRootProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * Add a new Toll Plaza and Local GeoFence version
 */
export const usePostGeoFencesRoot = (props: UsePostGeoFencesRootProps) => useMutate<void, void, void, void, void>("POST", encode`/geofences/`, props);


export type GetGeoFenceVersionsRootProps = Omit<GetProps<void, void, void, void>, "path">;

/**
 * Returns versions of Toll Plaza and Local GeoFence data
 */
export const GetGeoFenceVersionsRoot = (props: GetGeoFenceVersionsRootProps) => (
  <Get<void, void, void, void>
    path={encode`/geofences/versions/`}
    
    {...props}
  />
);

export type UseGetGeoFenceVersionsRootProps = Omit<UseGetProps<void, void, void, void>, "path">;

/**
 * Returns versions of Toll Plaza and Local GeoFence data
 */
export const useGetGeoFenceVersionsRoot = (props: UseGetGeoFenceVersionsRootProps) => useGet<void, void, void, void>(encode`/geofences/versions/`, props);


export type GetGeoFenceVersionsCurrentRootProps = Omit<GetProps<void, void, void, void>, "path">;

/**
 * Returns the current local geofence version
 */
export const GetGeoFenceVersionsCurrentRoot = (props: GetGeoFenceVersionsCurrentRootProps) => (
  <Get<void, void, void, void>
    path={encode`/geofences/versions/current/`}
    
    {...props}
  />
);

export type UseGetGeoFenceVersionsCurrentRootProps = Omit<UseGetProps<void, void, void, void>, "path">;

/**
 * Returns the current local geofence version
 */
export const useGetGeoFenceVersionsCurrentRoot = (props: UseGetGeoFenceVersionsCurrentRootProps) => useGet<void, void, void, void>(encode`/geofences/versions/current/`, props);


export type PostGJsonProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostGJson = (props: PostGJsonProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/gps/gjson`}
    
    {...props}
  />
);

export type UsePostGJsonProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostGJson = (props: UsePostGJsonProps) => useMutate<void, unknown, void, void, void>("POST", encode`/gps/gjson`, props);


export type GetLastUserGpsProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetLastUserGps = (props: GetLastUserGpsProps) => (
  <Get<void, unknown, void, void>
    path={encode`/gps/last_user_gps`}
    
    {...props}
  />
);

export type UseGetLastUserGpsProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetLastUserGps = (props: UseGetLastUserGpsProps) => useGet<void, unknown, void, void>(encode`/gps/last_user_gps`, props);


export type PostGpsLogsProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostGpsLogs = (props: PostGpsLogsProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/gps/log`}
    
    {...props}
  />
);

export type UsePostGpsLogsProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostGpsLogs = (props: UsePostGpsLogsProps) => useMutate<void, unknown, void, void, void>("POST", encode`/gps/log`, props);


export type GetJwtRefreshAccessProps = Omit<GetProps<AccessToken, void, void, void>, "path">;

/**
 * Retrieve a new access token from a valid refresh token
 */
export const GetJwtRefreshAccess = (props: GetJwtRefreshAccessProps) => (
  <Get<AccessToken, void, void, void>
    path={encode`/jwttoken/refresh`}
    
    {...props}
  />
);

export type UseGetJwtRefreshAccessProps = Omit<UseGetProps<AccessToken, void, void, void>, "path">;

/**
 * Retrieve a new access token from a valid refresh token
 */
export const useGetJwtRefreshAccess = (props: UseGetJwtRefreshAccessProps) => useGet<AccessToken, void, void, void>(encode`/jwttoken/refresh`, props);


export type GetJwtRevokeAccessProps = Omit<GetProps<void, void, void, void>, "path">;

/**
 * Revoke an access token
 */
export const GetJwtRevokeAccess = (props: GetJwtRevokeAccessProps) => (
  <Get<void, void, void, void>
    path={encode`/jwttoken/revokeaccess`}
    
    {...props}
  />
);

export type UseGetJwtRevokeAccessProps = Omit<UseGetProps<void, void, void, void>, "path">;

/**
 * Revoke an access token
 */
export const useGetJwtRevokeAccess = (props: UseGetJwtRevokeAccessProps) => useGet<void, void, void, void>(encode`/jwttoken/revokeaccess`, props);


export type GetJwtRevokeRefreshProps = Omit<GetProps<void, void, void, void>, "path">;

/**
 * Revoke a refresh token
 */
export const GetJwtRevokeRefresh = (props: GetJwtRevokeRefreshProps) => (
  <Get<void, void, void, void>
    path={encode`/jwttoken/revokerefresh`}
    
    {...props}
  />
);

export type UseGetJwtRevokeRefreshProps = Omit<UseGetProps<void, void, void, void>, "path">;

/**
 * Revoke a refresh token
 */
export const useGetJwtRevokeRefresh = (props: UseGetJwtRevokeRefreshProps) => useGet<void, void, void, void>(encode`/jwttoken/revokerefresh`, props);


export interface GetNotifyTollRunPathParams {
  id: number
}

export type GetNotifyTollRunProps = Omit<GetProps<void, unknown, void, GetNotifyTollRunPathParams>, "path"> & GetNotifyTollRunPathParams;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const GetNotifyTollRun = ({id, ...props}: GetNotifyTollRunProps) => (
  <Get<void, unknown, void, GetNotifyTollRunPathParams>
    path={encode`/notify/tollrun/${id}`}
    
    {...props}
  />
);

export type UseGetNotifyTollRunProps = Omit<UseGetProps<void, unknown, void, GetNotifyTollRunPathParams>, "path"> & GetNotifyTollRunPathParams;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const useGetNotifyTollRun = ({id, ...props}: UseGetNotifyTollRunProps) => useGet<void, unknown, void, GetNotifyTollRunPathParams>((paramsInPath: GetNotifyTollRunPathParams) => encode`/notify/tollrun/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface GetNotifyUserChargePathParams {
  id: number
}

export type GetNotifyUserChargeProps = Omit<GetProps<void, unknown, void, GetNotifyUserChargePathParams>, "path"> & GetNotifyUserChargePathParams;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const GetNotifyUserCharge = ({id, ...props}: GetNotifyUserChargeProps) => (
  <Get<void, unknown, void, GetNotifyUserChargePathParams>
    path={encode`/notify/usercharges/${id}`}
    
    {...props}
  />
);

export type UseGetNotifyUserChargeProps = Omit<UseGetProps<void, unknown, void, GetNotifyUserChargePathParams>, "path"> & GetNotifyUserChargePathParams;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const useGetNotifyUserCharge = ({id, ...props}: UseGetNotifyUserChargeProps) => useGet<void, unknown, void, GetNotifyUserChargePathParams>((paramsInPath: GetNotifyUserChargePathParams) => encode`/notify/usercharges/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface GetNotifyVehicleListPathParams {
  id: number
}

export type GetNotifyVehicleListProps = Omit<GetProps<void, unknown, void, GetNotifyVehicleListPathParams>, "path"> & GetNotifyVehicleListPathParams;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const GetNotifyVehicleList = ({id, ...props}: GetNotifyVehicleListProps) => (
  <Get<void, unknown, void, GetNotifyVehicleListPathParams>
    path={encode`/notify/vehiclelist/${id}`}
    
    {...props}
  />
);

export type UseGetNotifyVehicleListProps = Omit<UseGetProps<void, unknown, void, GetNotifyVehicleListPathParams>, "path"> & GetNotifyVehicleListPathParams;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const useGetNotifyVehicleList = ({id, ...props}: UseGetNotifyVehicleListProps) => useGet<void, unknown, void, GetNotifyVehicleListPathParams>((paramsInPath: GetNotifyVehicleListPathParams) => encode`/notify/vehiclelist/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type PostAddPhoneProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAddPhone = (props: PostAddPhoneProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/phone/add`}
    
    {...props}
  />
);

export type UsePostAddPhoneProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAddPhone = (props: UsePostAddPhoneProps) => useMutate<void, unknown, void, void, void>("POST", encode`/phone/add`, props);


export type PostDeletePhoneProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDeletePhone = (props: PostDeletePhoneProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/phone/delete`}
    
    {...props}
  />
);

export type UsePostDeletePhoneProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDeletePhone = (props: UsePostDeletePhoneProps) => useMutate<void, unknown, void, void, void>("POST", encode`/phone/delete`, props);


export type PostVerifyPhoneProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostVerifyPhone = (props: PostVerifyPhoneProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/phone/verify`}
    
    {...props}
  />
);

export type UsePostVerifyPhoneProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostVerifyPhone = (props: UsePostVerifyPhoneProps) => useMutate<void, unknown, void, void, void>("POST", encode`/phone/verify`, props);


export type PostExpReportProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostExpReport = (props: PostExpReportProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/report/exp`}
    
    {...props}
  />
);

export type UsePostExpReportProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostExpReport = (props: UsePostExpReportProps) => useMutate<void, unknown, void, void, void>("POST", encode`/report/exp`, props);


export type PostExpReportListProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostExpReportList = (props: PostExpReportListProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/report/explist`}
    
    {...props}
  />
);

export type UsePostExpReportListProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostExpReportList = (props: UsePostExpReportListProps) => useMutate<void, unknown, void, void, void>("POST", encode`/report/explist`, props);


export interface GetReportInputsByTypeIdPathParams {
  /**
   * a report type id
   */
  type_id: number
}

export type GetReportInputsByTypeIdProps = Omit<GetProps<void, void, void, GetReportInputsByTypeIdPathParams>, "path"> & GetReportInputsByTypeIdPathParams;

/**
 * Get a list of all stored report inputs in the system or agency, depending on the calling user role, with a matching type id
 */
export const GetReportInputsByTypeId = ({type_id, ...props}: GetReportInputsByTypeIdProps) => (
  <Get<void, void, void, GetReportInputsByTypeIdPathParams>
    path={encode`/reports/inputs/${type_id}`}
    
    {...props}
  />
);

export type UseGetReportInputsByTypeIdProps = Omit<UseGetProps<void, void, void, GetReportInputsByTypeIdPathParams>, "path"> & GetReportInputsByTypeIdPathParams;

/**
 * Get a list of all stored report inputs in the system or agency, depending on the calling user role, with a matching type id
 */
export const useGetReportInputsByTypeId = ({type_id, ...props}: UseGetReportInputsByTypeIdProps) => useGet<void, void, void, GetReportInputsByTypeIdPathParams>((paramsInPath: GetReportInputsByTypeIdPathParams) => encode`/reports/inputs/${paramsInPath.type_id}`, {  pathParams: { type_id }, ...props });


export interface PostReportInputsByTypeIdPathParams {
  /**
   * a report type id
   */
  type_id: number
}

export type PostReportInputsByTypeIdProps = Omit<MutateProps<void, unknown, void, void, PostReportInputsByTypeIdPathParams>, "path" | "verb"> & PostReportInputsByTypeIdPathParams;

/**
 * Create a new input for a given report type
 */
export const PostReportInputsByTypeId = ({type_id, ...props}: PostReportInputsByTypeIdProps) => (
  <Mutate<void, unknown, void, void, PostReportInputsByTypeIdPathParams>
    verb="POST"
    path={encode`/reports/inputs/${type_id}`}
    
    {...props}
  />
);

export type UsePostReportInputsByTypeIdProps = Omit<UseMutateProps<void, unknown, void, void, PostReportInputsByTypeIdPathParams>, "path" | "verb"> & PostReportInputsByTypeIdPathParams;

/**
 * Create a new input for a given report type
 */
export const usePostReportInputsByTypeId = ({type_id, ...props}: UsePostReportInputsByTypeIdProps) => useMutate<void, unknown, void, void, PostReportInputsByTypeIdPathParams>("POST", (paramsInPath: PostReportInputsByTypeIdPathParams) => encode`/reports/inputs/${paramsInPath.type_id}`, {  pathParams: { type_id }, ...props });


export interface DeleteReportInputsByTypeAndInputIdsPathParams {
  /**
   * a report type id
   */
  type_id: number
}

export type DeleteReportInputsByTypeAndInputIdsProps = Omit<MutateProps<void, unknown, void, number, DeleteReportInputsByTypeAndInputIdsPathParams>, "path" | "verb"> & DeleteReportInputsByTypeAndInputIdsPathParams;

/**
 * Deletes the stored report input with matching type id and input id
 */
export const DeleteReportInputsByTypeAndInputIds = ({type_id, ...props}: DeleteReportInputsByTypeAndInputIdsProps) => (
  <Mutate<void, unknown, void, number, DeleteReportInputsByTypeAndInputIdsPathParams>
    verb="DELETE"
    path={encode`/reports/inputs/${type_id}`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteReportInputsByTypeAndInputIdsProps = Omit<UseMutateProps<void, unknown, void, number, DeleteReportInputsByTypeAndInputIdsPathParams>, "path" | "verb"> & DeleteReportInputsByTypeAndInputIdsPathParams;

/**
 * Deletes the stored report input with matching type id and input id
 */
export const useDeleteReportInputsByTypeAndInputIds = ({type_id, ...props}: UseDeleteReportInputsByTypeAndInputIdsProps) => useMutate<void, unknown, void, number, DeleteReportInputsByTypeAndInputIdsPathParams>("DELETE", (paramsInPath: DeleteReportInputsByTypeAndInputIdsPathParams) => encode`/reports/inputs/${paramsInPath.type_id}`, { pathInlineBodyEncode: encodingFn, pathParams: { type_id }, ...props });


export interface GetReportInputsByTypeAndInputIdsPathParams {
  /**
   * a report type id
   */
  type_id: number;
  /**
   * an input id
   */
  input_id: number
}

export type GetReportInputsByTypeAndInputIdsProps = Omit<GetProps<void, void, void, GetReportInputsByTypeAndInputIdsPathParams>, "path"> & GetReportInputsByTypeAndInputIdsPathParams;

/**
 * Get the stored report input with matching type id and input id
 */
export const GetReportInputsByTypeAndInputIds = ({type_id, input_id, ...props}: GetReportInputsByTypeAndInputIdsProps) => (
  <Get<void, void, void, GetReportInputsByTypeAndInputIdsPathParams>
    path={encode`/reports/inputs/${type_id}/${input_id}`}
    
    {...props}
  />
);

export type UseGetReportInputsByTypeAndInputIdsProps = Omit<UseGetProps<void, void, void, GetReportInputsByTypeAndInputIdsPathParams>, "path"> & GetReportInputsByTypeAndInputIdsPathParams;

/**
 * Get the stored report input with matching type id and input id
 */
export const useGetReportInputsByTypeAndInputIds = ({type_id, input_id, ...props}: UseGetReportInputsByTypeAndInputIdsProps) => useGet<void, void, void, GetReportInputsByTypeAndInputIdsPathParams>((paramsInPath: GetReportInputsByTypeAndInputIdsPathParams) => encode`/reports/inputs/${paramsInPath.type_id}/${paramsInPath.input_id}`, {  pathParams: { type_id, input_id }, ...props });


export interface GetReportOutputsByTypeInputAndOutputIdsPathParams {
  /**
   * a report type id
   */
  type_id: number;
  /**
   * an input id
   */
  input_id: number;
  /**
   * an output id
   */
  output_id: number
}

export type GetReportOutputsByTypeInputAndOutputIdsProps = Omit<GetProps<void, void, void, GetReportOutputsByTypeInputAndOutputIdsPathParams>, "path"> & GetReportOutputsByTypeInputAndOutputIdsPathParams;

/**
 * Get a list of all stored report inputs in the system or agency, depending on the calling user role, with a matching type id
 */
export const GetReportOutputsByTypeInputAndOutputIds = ({type_id, input_id, output_id, ...props}: GetReportOutputsByTypeInputAndOutputIdsProps) => (
  <Get<void, void, void, GetReportOutputsByTypeInputAndOutputIdsPathParams>
    path={encode`/reports/outputs/${type_id}/${input_id}/${output_id}`}
    
    {...props}
  />
);

export type UseGetReportOutputsByTypeInputAndOutputIdsProps = Omit<UseGetProps<void, void, void, GetReportOutputsByTypeInputAndOutputIdsPathParams>, "path"> & GetReportOutputsByTypeInputAndOutputIdsPathParams;

/**
 * Get a list of all stored report inputs in the system or agency, depending on the calling user role, with a matching type id
 */
export const useGetReportOutputsByTypeInputAndOutputIds = ({type_id, input_id, output_id, ...props}: UseGetReportOutputsByTypeInputAndOutputIdsProps) => useGet<void, void, void, GetReportOutputsByTypeInputAndOutputIdsPathParams>((paramsInPath: GetReportOutputsByTypeInputAndOutputIdsPathParams) => encode`/reports/outputs/${paramsInPath.type_id}/${paramsInPath.input_id}/${paramsInPath.output_id}`, {  pathParams: { type_id, input_id, output_id }, ...props });


export interface GetSelfTripBuildingReportQueryParams {
  /**
   * user id
   */
  uid?: string;
  /**
   * YYYY-MM-DD HH24:MM:SS Start date and time, may contain date only
   */
  sdate: string;
  /**
   * YYYY-MM-DD HH24:MM:SS End date and time, may contain date only
   */
  edate: string;
  /**
   * Return only tolls with transponder ids
   */
  with_transponder_id_only: boolean;
  /**
   * Return tolls for any user id within time interval not just for uid
   */
  any_user_id: boolean;
}

export type GetSelfTripBuildingReportProps = Omit<GetProps<void, void, GetSelfTripBuildingReportQueryParams, void>, "path">;

/**
 * Retrieves JSON data containing GeoToll's side of the LAC trip building report for a given date and time interval
 */
export const GetSelfTripBuildingReport = (props: GetSelfTripBuildingReportProps) => (
  <Get<void, void, GetSelfTripBuildingReportQueryParams, void>
    path={encode`/reports/selftripbuilding`}
    
    {...props}
  />
);

export type UseGetSelfTripBuildingReportProps = Omit<UseGetProps<void, void, GetSelfTripBuildingReportQueryParams, void>, "path">;

/**
 * Retrieves JSON data containing GeoToll's side of the LAC trip building report for a given date and time interval
 */
export const useGetSelfTripBuildingReport = (props: UseGetSelfTripBuildingReportProps) => useGet<void, void, GetSelfTripBuildingReportQueryParams, void>(encode`/reports/selftripbuilding`, props);


export interface GetReportTypesRootQueryParams {
  /**
   * filters by report types available to agency_id
   */
  agency_id?: number;
}

export type GetReportTypesRootProps = Omit<GetProps<ReportTypeListModel, void, GetReportTypesRootQueryParams, void>, "path">;

/**
 * Get a list of all available types of reports in the system or agency, depending on the calling user role
 */
export const GetReportTypesRoot = (props: GetReportTypesRootProps) => (
  <Get<ReportTypeListModel, void, GetReportTypesRootQueryParams, void>
    path={encode`/reports/types`}
    
    {...props}
  />
);

export type UseGetReportTypesRootProps = Omit<UseGetProps<ReportTypeListModel, void, GetReportTypesRootQueryParams, void>, "path">;

/**
 * Get a list of all available types of reports in the system or agency, depending on the calling user role
 */
export const useGetReportTypesRoot = (props: UseGetReportTypesRootProps) => useGet<ReportTypeListModel, void, GetReportTypesRootQueryParams, void>(encode`/reports/types`, props);


export type PostAddSleeveProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostAddSleeve = (props: PostAddSleeveProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/sleeve/add`}
    
    {...props}
  />
);

export type UsePostAddSleeveProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostAddSleeve = (props: UsePostAddSleeveProps) => useMutate<void, unknown, void, void, void>("POST", encode`/sleeve/add`, props);


export type PostDeleteSleeveProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostDeleteSleeve = (props: PostDeleteSleeveProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/sleeve/delete`}
    
    {...props}
  />
);

export type UsePostDeleteSleeveProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostDeleteSleeve = (props: UsePostDeleteSleeveProps) => useMutate<void, unknown, void, void, void>("POST", encode`/sleeve/delete`, props);


export type DeleteSplitSessionRootProps = Omit<MutateProps<SplitSessionUserInfoItem, void, void, void, void>, "path" | "verb">;

/**
 * End or leave an ongoing split session, if one exists
 */
export const DeleteSplitSessionRoot = (props: DeleteSplitSessionRootProps) => (
  <Mutate<SplitSessionUserInfoItem, void, void, void, void>
    verb="DELETE"
    path={encode`/spsession/`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteSplitSessionRootProps = Omit<UseMutateProps<SplitSessionUserInfoItem, void, void, void, void>, "path" | "verb">;

/**
 * End or leave an ongoing split session, if one exists
 */
export const useDeleteSplitSessionRoot = (props: UseDeleteSplitSessionRootProps) => useMutate<SplitSessionUserInfoItem, void, void, void, void>("DELETE", encode`/spsession/`, { pathInlineBodyEncode: encodingFn,  ...props });


export interface GetSplitSessionRootQueryParams {
  /**
   * Retrieve only active session members
   */
  active_only?: boolean;
}

export type GetSplitSessionRootProps = Omit<GetProps<SplitSessionUserInfoItem[], void, GetSplitSessionRootQueryParams, void>, "path">;

/**
 * Retrieve the list of consumers that have joined in the ongoing split session, if one exists
 */
export const GetSplitSessionRoot = (props: GetSplitSessionRootProps) => (
  <Get<SplitSessionUserInfoItem[], void, GetSplitSessionRootQueryParams, void>
    path={encode`/spsession/`}
    
    {...props}
  />
);

export type UseGetSplitSessionRootProps = Omit<UseGetProps<SplitSessionUserInfoItem[], void, GetSplitSessionRootQueryParams, void>, "path">;

/**
 * Retrieve the list of consumers that have joined in the ongoing split session, if one exists
 */
export const useGetSplitSessionRoot = (props: UseGetSplitSessionRootProps) => useGet<SplitSessionUserInfoItem[], void, GetSplitSessionRootQueryParams, void>(encode`/spsession/`, props);


export interface PostSplitSessionRootQueryParams {
  /**
   * Split charge session name
   */
  name?: string;
}

export type PostSplitSessionRootProps = Omit<MutateProps<SplitSessionInfo, void, PostSplitSessionRootQueryParams, void, void>, "path" | "verb">;

/**
 * Create a new split session and start it
 */
export const PostSplitSessionRoot = (props: PostSplitSessionRootProps) => (
  <Mutate<SplitSessionInfo, void, PostSplitSessionRootQueryParams, void, void>
    verb="POST"
    path={encode`/spsession/`}
    
    {...props}
  />
);

export type UsePostSplitSessionRootProps = Omit<UseMutateProps<SplitSessionInfo, void, PostSplitSessionRootQueryParams, void, void>, "path" | "verb">;

/**
 * Create a new split session and start it
 */
export const usePostSplitSessionRoot = (props: UsePostSplitSessionRootProps) => useMutate<SplitSessionInfo, void, PostSplitSessionRootQueryParams, void, void>("POST", encode`/spsession/`, props);


export interface GetSplitSessionByIdPathParams {
  id: number
}

export type GetSplitSessionByIdProps = Omit<GetProps<SplitSessionShortInfo, void, void, GetSplitSessionByIdPathParams>, "path"> & GetSplitSessionByIdPathParams;

/**
 * Get summary information about an ongoing split session
 */
export const GetSplitSessionById = ({id, ...props}: GetSplitSessionByIdProps) => (
  <Get<SplitSessionShortInfo, void, void, GetSplitSessionByIdPathParams>
    path={encode`/spsession/${id}`}
    
    {...props}
  />
);

export type UseGetSplitSessionByIdProps = Omit<UseGetProps<SplitSessionShortInfo, void, void, GetSplitSessionByIdPathParams>, "path"> & GetSplitSessionByIdPathParams;

/**
 * Get summary information about an ongoing split session
 */
export const useGetSplitSessionById = ({id, ...props}: UseGetSplitSessionByIdProps) => useGet<SplitSessionShortInfo, void, void, GetSplitSessionByIdPathParams>((paramsInPath: GetSplitSessionByIdPathParams) => encode`/spsession/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PostSplitSessionByIdPathParams {
  id: number
}

export type PostSplitSessionByIdProps = Omit<MutateProps<SplitSessionInfo, void, void, void, PostSplitSessionByIdPathParams>, "path" | "verb"> & PostSplitSessionByIdPathParams;

/**
 * Join in an ongoing split session
 */
export const PostSplitSessionById = ({id, ...props}: PostSplitSessionByIdProps) => (
  <Mutate<SplitSessionInfo, void, void, void, PostSplitSessionByIdPathParams>
    verb="POST"
    path={encode`/spsession/${id}`}
    
    {...props}
  />
);

export type UsePostSplitSessionByIdProps = Omit<UseMutateProps<SplitSessionInfo, void, void, void, PostSplitSessionByIdPathParams>, "path" | "verb"> & PostSplitSessionByIdPathParams;

/**
 * Join in an ongoing split session
 */
export const usePostSplitSessionById = ({id, ...props}: UsePostSplitSessionByIdProps) => useMutate<SplitSessionInfo, void, void, void, PostSplitSessionByIdPathParams>("POST", (paramsInPath: PostSplitSessionByIdPathParams) => encode`/spsession/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type GetSwaggerJsonProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * Retrieves the Swagger JSON specification file for this API
 */
export const GetSwaggerJson = (props: GetSwaggerJsonProps) => (
  <Get<void, unknown, void, void>
    path={encode`/swagger/json`}
    
    {...props}
  />
);

export type UseGetSwaggerJsonProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * Retrieves the Swagger JSON specification file for this API
 */
export const useGetSwaggerJson = (props: UseGetSwaggerJsonProps) => useGet<void, unknown, void, void>(encode`/swagger/json`, props);


export type GetDeleteExpiredJwtTokensTaskProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint to delete expire JWT tokens from DB. Do not call directly
 */
export const GetDeleteExpiredJwtTokensTask = (props: GetDeleteExpiredJwtTokensTaskProps) => (
  <Get<void, unknown, void, void>
    path={encode`/tasks/deleteExpiredJWTTokens`}
    
    {...props}
  />
);

export type UseGetDeleteExpiredJwtTokensTaskProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint to delete expire JWT tokens from DB. Do not call directly
 */
export const useGetDeleteExpiredJwtTokensTask = (props: UseGetDeleteExpiredJwtTokensTaskProps) => useGet<void, unknown, void, void>(encode`/tasks/deleteExpiredJWTTokens`, props);


export type GetEnqueueGpsTaskProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint to start the task of enqueuing GPS points. Do not call directly
 */
export const GetEnqueueGpsTask = (props: GetEnqueueGpsTaskProps) => (
  <Get<void, unknown, void, void>
    path={encode`/tasks/enqueueGPS`}
    
    {...props}
  />
);

export type UseGetEnqueueGpsTaskProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint to start the task of enqueuing GPS points. Do not call directly
 */
export const useGetEnqueueGpsTask = (props: UseGetEnqueueGpsTaskProps) => useGet<void, unknown, void, void>(encode`/tasks/enqueueGPS`, props);


export type GetTasksPausedProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * System admin endpoint
 */
export const GetTasksPaused = (props: GetTasksPausedProps) => (
  <Get<void, unknown, void, void>
    path={encode`/tasks/paused`}
    
    {...props}
  />
);

export type UseGetTasksPausedProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * System admin endpoint
 */
export const useGetTasksPaused = (props: UseGetTasksPausedProps) => useGet<void, unknown, void, void>(encode`/tasks/paused`, props);


export type PostTasksPausedProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

/**
 * System admin endpoint
 */
export const PostTasksPaused = (props: PostTasksPausedProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/tasks/paused`}
    
    {...props}
  />
);

export type UsePostTasksPausedProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

/**
 * System admin endpoint
 */
export const usePostTasksPaused = (props: UsePostTasksPausedProps) => useMutate<void, unknown, void, void, void>("POST", encode`/tasks/paused`, props);


export type GetTestLocalGeofenceVersionNotificationProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const GetTestLocalGeofenceVersionNotification = (props: GetTestLocalGeofenceVersionNotificationProps) => (
  <Get<void, unknown, void, void>
    path={encode`/tasks/testlgf`}
    
    {...props}
  />
);

export type UseGetTestLocalGeofenceVersionNotificationProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint. Do not call directly
 */
export const useGetTestLocalGeofenceVersionNotification = (props: UseGetTestLocalGeofenceVersionNotificationProps) => useGet<void, unknown, void, void>(encode`/tasks/testlgf`, props);


export type GetGetIsUsingAwsdbOnServerProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint to check if using AWS DB. Do not call directly
 */
export const GetGetIsUsingAwsdbOnServer = (props: GetGetIsUsingAwsdbOnServerProps) => (
  <Get<void, unknown, void, void>
    path={encode`/tasks/usingawsdb`}
    
    {...props}
  />
);

export type UseGetGetIsUsingAwsdbOnServerProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * PRIVATE endpoint to check if using AWS DB. Do not call directly
 */
export const useGetGetIsUsingAwsdbOnServer = (props: UseGetGetIsUsingAwsdbOnServerProps) => useGet<void, unknown, void, void>(encode`/tasks/usingawsdb`, props);


export type GetTestRootProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetTestRoot = (props: GetTestRootProps) => (
  <Get<void, unknown, void, void>
    path={encode`/test/`}
    
    {...props}
  />
);

export type UseGetTestRootProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetTestRoot = (props: UseGetTestRootProps) => useGet<void, unknown, void, void>(encode`/test/`, props);


export type PostExpenseStatementProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostExpenseStatement = (props: PostExpenseStatementProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/expstatement`}
    
    {...props}
  />
);

export type UsePostExpenseStatementProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostExpenseStatement = (props: UsePostExpenseStatementProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/expstatement`, props);


export type GetHitTestTollPlazasProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetHitTestTollPlazas = (props: GetHitTestTollPlazasProps) => (
  <Get<void, unknown, void, void>
    path={encode`/toll/hittest`}
    
    {...props}
  />
);

export type UseGetHitTestTollPlazasProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetHitTestTollPlazas = (props: UseGetHitTestTollPlazasProps) => useGet<void, unknown, void, void>(encode`/toll/hittest`, props);


export type GetIntersectionsProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetIntersections = (props: GetIntersectionsProps) => (
  <Get<void, unknown, void, void>
    path={encode`/toll/intersections`}
    
    {...props}
  />
);

export type UseGetIntersectionsProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetIntersections = (props: UseGetIntersectionsProps) => useGet<void, unknown, void, void>(encode`/toll/intersections`, props);


export type GetIntersectionsAltitudesProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetIntersectionsAltitudes = (props: GetIntersectionsAltitudesProps) => (
  <Get<void, unknown, void, void>
    path={encode`/toll/intersections/altitudes`}
    
    {...props}
  />
);

export type UseGetIntersectionsAltitudesProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetIntersectionsAltitudes = (props: UseGetIntersectionsAltitudesProps) => useGet<void, unknown, void, void>(encode`/toll/intersections/altitudes`, props);


export type PostIntersectionsSearchProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostIntersectionsSearch = (props: PostIntersectionsSearchProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/intersections/search`}
    
    {...props}
  />
);

export type UsePostIntersectionsSearchProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostIntersectionsSearch = (props: UsePostIntersectionsSearchProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/intersections/search`, props);


export type PostTollListProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTollList = (props: PostTollListProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/list`}
    
    {...props}
  />
);

export type UsePostTollListProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTollList = (props: UsePostTollListProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/list`, props);


export type PostTollList2Props = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTollList2 = (props: PostTollList2Props) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/list2`}
    
    {...props}
  />
);

export type UsePostTollList2Props = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTollList2 = (props: UsePostTollList2Props) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/list2`, props);


export type PostTollLogsProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTollLogs = (props: PostTollLogsProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/log`}
    
    {...props}
  />
);

export type UsePostTollLogsProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTollLogs = (props: UsePostTollLogsProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/log`, props);


export type PostTestFromGpsLogProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTestFromGpsLog = (props: PostTestFromGpsLogProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/test_from_gpslog`}
    
    {...props}
  />
);

export type UsePostTestFromGpsLogProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTestFromGpsLog = (props: UsePostTestFromGpsLogProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/test_from_gpslog`, props);


export type PostTestFromGpsLogBatchProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTestFromGpsLogBatch = (props: PostTestFromGpsLogBatchProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/test_from_gpslog/batch`}
    
    {...props}
  />
);

export type UsePostTestFromGpsLogBatchProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTestFromGpsLogBatch = (props: UsePostTestFromGpsLogBatchProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/test_from_gpslog/batch`, props);


export type PostTestFromGpsPointsProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const PostTestFromGpsPoints = (props: PostTestFromGpsPointsProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={encode`/toll/test_from_gpspoints`}
    
    {...props}
  />
);

export type UsePostTestFromGpsPointsProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const usePostTestFromGpsPoints = (props: UsePostTestFromGpsPointsProps) => useMutate<void, unknown, void, void, void>("POST", encode`/toll/test_from_gpspoints`, props);


export interface GetToolPlazasRootGetPostQueryParams {
  /**
   * Include polygons, start/mid/endpoints, etc.
   */
  include_parts?: boolean;
  /**
   * Place all polygons in tollplaza feature collection instead of divided into their respective tollplaza's properties
   */
  unroll_parts?: boolean;
  /**
   * Include encoded Geofence JSON in collection properties
   */
  include_geofences?: boolean;
  /**
   * When present retrieves only toll plazas belonging to agency_id
   */
  agency_id?: number;
}

export type GetToolPlazasRootGetPostProps = Omit<GetProps<TollplazaFeatureCollection, void, GetToolPlazasRootGetPostQueryParams, void>, "path">;

/**
 * Get a GeoJSON feature collection of all tollplazas in the system or agency, depending on user role
 */
export const GetToolPlazasRootGetPost = (props: GetToolPlazasRootGetPostProps) => (
  <Get<TollplazaFeatureCollection, void, GetToolPlazasRootGetPostQueryParams, void>
    path={encode`/tollplazas/`}
    
    {...props}
  />
);

export type UseGetToolPlazasRootGetPostProps = Omit<UseGetProps<TollplazaFeatureCollection, void, GetToolPlazasRootGetPostQueryParams, void>, "path">;

/**
 * Get a GeoJSON feature collection of all tollplazas in the system or agency, depending on user role
 */
export const useGetToolPlazasRootGetPost = (props: UseGetToolPlazasRootGetPostProps) => useGet<TollplazaFeatureCollection, void, GetToolPlazasRootGetPostQueryParams, void>(encode`/tollplazas/`, props);


export interface PostToolPlazasRootGetPostQueryParams {
  /**
   * The agency id of the new toll plaza
   */
  agency_id: number;
  /**
   * lng,lat as a string
   */
  location: string;
}

export type PostToolPlazasRootGetPostProps = Omit<MutateProps<AddTollPlazaResponse, void, PostToolPlazasRootGetPostQueryParams, void, void>, "path" | "verb">;

/**
 * Create a new toll plaza
 */
export const PostToolPlazasRootGetPost = (props: PostToolPlazasRootGetPostProps) => (
  <Mutate<AddTollPlazaResponse, void, PostToolPlazasRootGetPostQueryParams, void, void>
    verb="POST"
    path={encode`/tollplazas/`}
    
    {...props}
  />
);

export type UsePostToolPlazasRootGetPostProps = Omit<UseMutateProps<AddTollPlazaResponse, void, PostToolPlazasRootGetPostQueryParams, void, void>, "path" | "verb">;

/**
 * Create a new toll plaza
 */
export const usePostToolPlazasRootGetPost = (props: UsePostToolPlazasRootGetPostProps) => useMutate<AddTollPlazaResponse, void, PostToolPlazasRootGetPostQueryParams, void, void>("POST", encode`/tollplazas/`, props);


export type DeleteTollPlazaImageByIdGetPutDeleteProps = Omit<MutateProps<void, void, void, number, void>, "path" | "verb">;

/**
 * Delete the image associated with the tollplaza with a matching id
 */
export const DeleteTollPlazaImageByIdGetPutDelete = (props: DeleteTollPlazaImageByIdGetPutDeleteProps) => (
  <Mutate<void, void, void, number, void>
    verb="DELETE"
    path={encode`/tollplazas/image`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteTollPlazaImageByIdGetPutDeleteProps = Omit<UseMutateProps<void, void, void, number, void>, "path" | "verb">;

/**
 * Delete the image associated with the tollplaza with a matching id
 */
export const useDeleteTollPlazaImageByIdGetPutDelete = (props: UseDeleteTollPlazaImageByIdGetPutDeleteProps) => useMutate<void, void, void, number, void>("DELETE", encode`/tollplazas/image`, { pathInlineBodyEncode: encodingFn,  ...props });


export interface GetTollPlazaImageByIdGetPutDeletePathParams {
  /**
   * a tollplaza id
   */
  id: number
}

export type GetTollPlazaImageByIdGetPutDeleteProps = Omit<GetProps<void, unknown, void, GetTollPlazaImageByIdGetPutDeletePathParams>, "path"> & GetTollPlazaImageByIdGetPutDeletePathParams;

/**
 * Get the image associated with the tollplaza with a matching id
 */
export const GetTollPlazaImageByIdGetPutDelete = ({id, ...props}: GetTollPlazaImageByIdGetPutDeleteProps) => (
  <Get<void, unknown, void, GetTollPlazaImageByIdGetPutDeletePathParams>
    path={encode`/tollplazas/image/${id}`}
    
    {...props}
  />
);

export type UseGetTollPlazaImageByIdGetPutDeleteProps = Omit<UseGetProps<void, unknown, void, GetTollPlazaImageByIdGetPutDeletePathParams>, "path"> & GetTollPlazaImageByIdGetPutDeletePathParams;

/**
 * Get the image associated with the tollplaza with a matching id
 */
export const useGetTollPlazaImageByIdGetPutDelete = ({id, ...props}: UseGetTollPlazaImageByIdGetPutDeleteProps) => useGet<void, unknown, void, GetTollPlazaImageByIdGetPutDeletePathParams>((paramsInPath: GetTollPlazaImageByIdGetPutDeletePathParams) => encode`/tollplazas/image/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PutTollPlazaImageByIdGetPutDeleteQueryParams {
  /**
   * the image type, valid values are {'JPEG', 'PNG'}
   */
  image_type: string;
}

export interface PutTollPlazaImageByIdGetPutDeletePathParams {
  /**
   * a tollplaza id
   */
  id: number
}

export type PutTollPlazaImageByIdGetPutDeleteProps = Omit<MutateProps<void, void, PutTollPlazaImageByIdGetPutDeleteQueryParams, void, PutTollPlazaImageByIdGetPutDeletePathParams>, "path" | "verb"> & PutTollPlazaImageByIdGetPutDeletePathParams;

/**
 * Update the image associated with the tollplaza with a matching id
 */
export const PutTollPlazaImageByIdGetPutDelete = ({id, ...props}: PutTollPlazaImageByIdGetPutDeleteProps) => (
  <Mutate<void, void, PutTollPlazaImageByIdGetPutDeleteQueryParams, void, PutTollPlazaImageByIdGetPutDeletePathParams>
    verb="PUT"
    path={encode`/tollplazas/image/${id}`}
    
    {...props}
  />
);

export type UsePutTollPlazaImageByIdGetPutDeleteProps = Omit<UseMutateProps<void, void, PutTollPlazaImageByIdGetPutDeleteQueryParams, void, PutTollPlazaImageByIdGetPutDeletePathParams>, "path" | "verb"> & PutTollPlazaImageByIdGetPutDeletePathParams;

/**
 * Update the image associated with the tollplaza with a matching id
 */
export const usePutTollPlazaImageByIdGetPutDelete = ({id, ...props}: UsePutTollPlazaImageByIdGetPutDeleteProps) => useMutate<void, void, PutTollPlazaImageByIdGetPutDeleteQueryParams, void, PutTollPlazaImageByIdGetPutDeletePathParams>("PUT", (paramsInPath: PutTollPlazaImageByIdGetPutDeletePathParams) => encode`/tollplazas/image/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type GetLocalGeoFenceRootProps = Omit<GetProps<LocalGeofenceReponseModel, void, void, void>, "path">;

/**
 * Gets the current local geofence JSON
 */
export const GetLocalGeoFenceRoot = (props: GetLocalGeoFenceRootProps) => (
  <Get<LocalGeofenceReponseModel, void, void, void>
    path={encode`/tollplazas/localgeofence`}
    
    {...props}
  />
);

export type UseGetLocalGeoFenceRootProps = Omit<UseGetProps<LocalGeofenceReponseModel, void, void, void>, "path">;

/**
 * Gets the current local geofence JSON
 */
export const useGetLocalGeoFenceRoot = (props: UseGetLocalGeoFenceRootProps) => useGet<LocalGeofenceReponseModel, void, void, void>(encode`/tollplazas/localgeofence`, props);


export type PostLocalGeoFenceRootProps = Omit<MutateProps<LocalGeofenceReponseModel, void, void, void, void>, "path" | "verb">;

/**
 * Sets the current local geofence JSON from the whole body of the request
 */
export const PostLocalGeoFenceRoot = (props: PostLocalGeoFenceRootProps) => (
  <Mutate<LocalGeofenceReponseModel, void, void, void, void>
    verb="POST"
    path={encode`/tollplazas/localgeofence`}
    
    {...props}
  />
);

export type UsePostLocalGeoFenceRootProps = Omit<UseMutateProps<LocalGeofenceReponseModel, void, void, void, void>, "path" | "verb">;

/**
 * Sets the current local geofence JSON from the whole body of the request
 */
export const usePostLocalGeoFenceRoot = (props: UsePostLocalGeoFenceRootProps) => useMutate<LocalGeofenceReponseModel, void, void, void, void>("POST", encode`/tollplazas/localgeofence`, props);


export interface GetTollPlazaByIdGetPutDeleteQueryParams {
  /**
   * Include polygons, start/mid/endpoints, etc.
   */
  include_parts?: boolean;
  /**
   * Place all polygons in tollplaza feature collection instead of divided into their respective tollplaza's properties
   */
  unroll_parts?: boolean;
  /**
   * Include encoded Geofence JSON in collection properties
   */
  include_geofences?: boolean;
  /**
   * When present retrieves only toll plazas belonging to agency_id
   */
  agency_id?: number;
}

export interface GetTollPlazaByIdGetPutDeletePathParams {
  /**
   * a tollplaza id
   */
  id: number
}

export type GetTollPlazaByIdGetPutDeleteProps = Omit<GetProps<TollplazaFeatureCollection, void, GetTollPlazaByIdGetPutDeleteQueryParams, GetTollPlazaByIdGetPutDeletePathParams>, "path"> & GetTollPlazaByIdGetPutDeletePathParams;

/**
 * Get a GeoJSON feature collection containing the tollplaza with a matching id
 */
export const GetTollPlazaByIdGetPutDelete = ({id, ...props}: GetTollPlazaByIdGetPutDeleteProps) => (
  <Get<TollplazaFeatureCollection, void, GetTollPlazaByIdGetPutDeleteQueryParams, GetTollPlazaByIdGetPutDeletePathParams>
    path={encode`/tollplazas/${id}`}
    
    {...props}
  />
);

export type UseGetTollPlazaByIdGetPutDeleteProps = Omit<UseGetProps<TollplazaFeatureCollection, void, GetTollPlazaByIdGetPutDeleteQueryParams, GetTollPlazaByIdGetPutDeletePathParams>, "path"> & GetTollPlazaByIdGetPutDeletePathParams;

/**
 * Get a GeoJSON feature collection containing the tollplaza with a matching id
 */
export const useGetTollPlazaByIdGetPutDelete = ({id, ...props}: UseGetTollPlazaByIdGetPutDeleteProps) => useGet<TollplazaFeatureCollection, void, GetTollPlazaByIdGetPutDeleteQueryParams, GetTollPlazaByIdGetPutDeletePathParams>((paramsInPath: GetTollPlazaByIdGetPutDeletePathParams) => encode`/tollplazas/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PutTollPlazaByIdGetPutDeletePathParams {
  /**
   * a tollplaza id
   */
  id: number
}

export type PutTollPlazaByIdGetPutDeleteProps = Omit<MutateProps<void, unknown, void, TollplazaPointFeature, PutTollPlazaByIdGetPutDeletePathParams>, "path" | "verb"> & PutTollPlazaByIdGetPutDeletePathParams;

/**
 * Update a toll plaza
 */
export const PutTollPlazaByIdGetPutDelete = ({id, ...props}: PutTollPlazaByIdGetPutDeleteProps) => (
  <Mutate<void, unknown, void, TollplazaPointFeature, PutTollPlazaByIdGetPutDeletePathParams>
    verb="PUT"
    path={encode`/tollplazas/${id}`}
    
    {...props}
  />
);

export type UsePutTollPlazaByIdGetPutDeleteProps = Omit<UseMutateProps<void, unknown, void, TollplazaPointFeature, PutTollPlazaByIdGetPutDeletePathParams>, "path" | "verb"> & PutTollPlazaByIdGetPutDeletePathParams;

/**
 * Update a toll plaza
 */
export const usePutTollPlazaByIdGetPutDelete = ({id, ...props}: UsePutTollPlazaByIdGetPutDeleteProps) => useMutate<void, unknown, void, TollplazaPointFeature, PutTollPlazaByIdGetPutDeletePathParams>("PUT", (paramsInPath: PutTollPlazaByIdGetPutDeletePathParams) => encode`/tollplazas/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface DeleteTollRunRootQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
}

export type DeleteTollRunRootProps = Omit<MutateProps<TollrunItemModel, void, DeleteTollRunRootQueryParams, void, void>, "path" | "verb">;

/**
 * Delete the active toll run of a consumer user
 */
export const DeleteTollRunRoot = (props: DeleteTollRunRootProps) => (
  <Mutate<TollrunItemModel, void, DeleteTollRunRootQueryParams, void, void>
    verb="DELETE"
    path={encode`/tollrun/`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteTollRunRootProps = Omit<UseMutateProps<TollrunItemModel, void, DeleteTollRunRootQueryParams, void, void>, "path" | "verb">;

/**
 * Delete the active toll run of a consumer user
 */
export const useDeleteTollRunRoot = (props: UseDeleteTollRunRootProps) => useMutate<TollrunItemModel, void, DeleteTollRunRootQueryParams, void, void>("DELETE", encode`/tollrun/`, { pathInlineBodyEncode: encodingFn,  ...props });


export interface GetTollRunRootQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
}

export type GetTollRunRootProps = Omit<GetProps<TollrunItemModel, void, GetTollRunRootQueryParams, void>, "path">;

/**
 * Get the active toll run of a consumer user, if one exists
 */
export const GetTollRunRoot = (props: GetTollRunRootProps) => (
  <Get<TollrunItemModel, void, GetTollRunRootQueryParams, void>
    path={encode`/tollrun/`}
    
    {...props}
  />
);

export type UseGetTollRunRootProps = Omit<UseGetProps<TollrunItemModel, void, GetTollRunRootQueryParams, void>, "path">;

/**
 * Get the active toll run of a consumer user, if one exists
 */
export const useGetTollRunRoot = (props: UseGetTollRunRootProps) => useGet<TollrunItemModel, void, GetTollRunRootQueryParams, void>(encode`/tollrun/`, props);


export interface PostTollRunRootQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
  /**
   * vehicle id
   */
  vehicle_id: number;
  /**
   * Unique device id
   */
  device_id: string;
  /**
   * Encodes the version number as a number for comparison, iOS or Android, and classes like Full, LAC-simplified, LAC-POC2, etc. e.g 1081_iOS_Full, 1095_Android_LAC-simplified
   */
  appversion: string;
  /**
   * Number of passengers, '1', '2', or '3+'
   */
  numpass: string;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM user local timestamp
   */
  usertime: string;
  /**
   * YYYY-MM-DD HH24:MM:SS.MMM UTC timestamp
   */
  created_at: string;
}

export type PostTollRunRootProps = Omit<MutateProps<TollrunItemModel, void, PostTollRunRootQueryParams, void, void>, "path" | "verb">;

/**
 * Create a new toll run
 */
export const PostTollRunRoot = (props: PostTollRunRootProps) => (
  <Mutate<TollrunItemModel, void, PostTollRunRootQueryParams, void, void>
    verb="POST"
    path={encode`/tollrun/`}
    
    {...props}
  />
);

export type UsePostTollRunRootProps = Omit<UseMutateProps<TollrunItemModel, void, PostTollRunRootQueryParams, void, void>, "path" | "verb">;

/**
 * Create a new toll run
 */
export const usePostTollRunRoot = (props: UsePostTollRunRootProps) => useMutate<TollrunItemModel, void, PostTollRunRootQueryParams, void, void>("POST", encode`/tollrun/`, props);


export interface PutTollRunRootQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
  /**
   * Encodes the version number as a number for comparison, iOS or Android, and classes like Full, LAC-simplified, LAC-POC2, etc. e.g 1081_iOS_Full, 1095_Android_LAC-simplified
   */
  appversion?: string;
  /**
   * Number of passengers, '1', '2', or '3+'
   */
  numpass?: string;
  /**
   * The passenger count session id linked to this request, if any
   */
  passenger_count_id?: number;
}

export type PutTollRunRootProps = Omit<MutateProps<TollrunItemModel, void, PutTollRunRootQueryParams, void, void>, "path" | "verb">;

/**
 * Update the active toll run of a consumer user, if one exists. All parameters are optional, send only the ones that need to be updated
 */
export const PutTollRunRoot = (props: PutTollRunRootProps) => (
  <Mutate<TollrunItemModel, void, PutTollRunRootQueryParams, void, void>
    verb="PUT"
    path={encode`/tollrun/`}
    
    {...props}
  />
);

export type UsePutTollRunRootProps = Omit<UseMutateProps<TollrunItemModel, void, PutTollRunRootQueryParams, void, void>, "path" | "verb">;

/**
 * Update the active toll run of a consumer user, if one exists. All parameters are optional, send only the ones that need to be updated
 */
export const usePutTollRunRoot = (props: UsePutTollRunRootProps) => useMutate<TollrunItemModel, void, PutTollRunRootQueryParams, void, void>("PUT", encode`/tollrun/`, props);


export type GetTollRunConditionsProps = Omit<GetProps<TollrunConditionsModel, void, void, void>, "path">;

/**
 * Admins get the default conditions for starting and continuing in a toll run
 */
export const GetTollRunConditions = (props: GetTollRunConditionsProps) => (
  <Get<TollrunConditionsModel, void, void, void>
    path={encode`/tollrun/conditions`}
    
    {...props}
  />
);

export type UseGetTollRunConditionsProps = Omit<UseGetProps<TollrunConditionsModel, void, void, void>, "path">;

/**
 * Admins get the default conditions for starting and continuing in a toll run
 */
export const useGetTollRunConditions = (props: UseGetTollRunConditionsProps) => useGet<TollrunConditionsModel, void, void, void>(encode`/tollrun/conditions`, props);


export interface PostTollRunConditionsQueryParams {
  /**
   * Minimum balance
   */
  min_balance?: number;
}

export type PostTollRunConditionsProps = Omit<MutateProps<TollrunConditionsModel, void, PostTollRunConditionsQueryParams, void, void>, "path" | "verb">;

/**
 * Admins set the default conditions for starting and continuing in a toll run
 */
export const PostTollRunConditions = (props: PostTollRunConditionsProps) => (
  <Mutate<TollrunConditionsModel, void, PostTollRunConditionsQueryParams, void, void>
    verb="POST"
    path={encode`/tollrun/conditions`}
    
    {...props}
  />
);

export type UsePostTollRunConditionsProps = Omit<UseMutateProps<TollrunConditionsModel, void, PostTollRunConditionsQueryParams, void, void>, "path" | "verb">;

/**
 * Admins set the default conditions for starting and continuing in a toll run
 */
export const usePostTollRunConditions = (props: UsePostTollRunConditionsProps) => useMutate<TollrunConditionsModel, void, PostTollRunConditionsQueryParams, void, void>("POST", encode`/tollrun/conditions`, props);


export type PostTollRunGpsLogProps = Omit<MutateProps<GpslogPostResponseModel, void, void, GpslogPostPayloadModel, void>, "path" | "verb">;

/**
 * Log GPS data to a given toll run
 */
export const PostTollRunGpsLog = (props: PostTollRunGpsLogProps) => (
  <Mutate<GpslogPostResponseModel, void, void, GpslogPostPayloadModel, void>
    verb="POST"
    path={encode`/tollrun/gpslog`}
    
    {...props}
  />
);

export type UsePostTollRunGpsLogProps = Omit<UseMutateProps<GpslogPostResponseModel, void, void, GpslogPostPayloadModel, void>, "path" | "verb">;

/**
 * Log GPS data to a given toll run
 */
export const usePostTollRunGpsLog = (props: UsePostTollRunGpsLogProps) => useMutate<GpslogPostResponseModel, void, void, GpslogPostPayloadModel, void>("POST", encode`/tollrun/gpslog`, props);


export type GetTollRunMinAppVersionProps = Omit<GetProps<TollrunMinAppVersionModel, void, void, void>, "path">;

/**
 * Get the minimum version of the app required to create toll runs and toll run gps logs
 */
export const GetTollRunMinAppVersion = (props: GetTollRunMinAppVersionProps) => (
  <Get<TollrunMinAppVersionModel, void, void, void>
    path={encode`/tollrun/minappversion`}
    
    {...props}
  />
);

export type UseGetTollRunMinAppVersionProps = Omit<UseGetProps<TollrunMinAppVersionModel, void, void, void>, "path">;

/**
 * Get the minimum version of the app required to create toll runs and toll run gps logs
 */
export const useGetTollRunMinAppVersion = (props: UseGetTollRunMinAppVersionProps) => useGet<TollrunMinAppVersionModel, void, void, void>(encode`/tollrun/minappversion`, props);


export interface GetTollRunUpdatesQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
}

export type GetTollRunUpdatesProps = Omit<GetProps<TollrunGetUpdatesResponseModel, void, GetTollRunUpdatesQueryParams, void>, "path">;

/**
 * Get the list of updates of the active toll run of a consumer user, if one exists
 */
export const GetTollRunUpdates = (props: GetTollRunUpdatesProps) => (
  <Get<TollrunGetUpdatesResponseModel, void, GetTollRunUpdatesQueryParams, void>
    path={encode`/tollrun/updates`}
    
    {...props}
  />
);

export type UseGetTollRunUpdatesProps = Omit<UseGetProps<TollrunGetUpdatesResponseModel, void, GetTollRunUpdatesQueryParams, void>, "path">;

/**
 * Get the list of updates of the active toll run of a consumer user, if one exists
 */
export const useGetTollRunUpdates = (props: UseGetTollRunUpdatesProps) => useGet<TollrunGetUpdatesResponseModel, void, GetTollRunUpdatesQueryParams, void>(encode`/tollrun/updates`, props);


export type GetUsersRootProps = Omit<GetProps<UsersModel, void, void, void>, "path">;

/**
 * Returns the consumer user record when called by a consumer, or a list of all records consumer role when called by an admin user
 */
export const GetUsersRoot = (props: GetUsersRootProps) => (
  <Get<UsersModel, void, void, void>
    path={encode`/user/`}
    
    {...props}
  />
);

export type UseGetUsersRootProps = Omit<UseGetProps<UsersModel, void, void, void>, "path">;

/**
 * Returns the consumer user record when called by a consumer, or a list of all records consumer role when called by an admin user
 */
export const useGetUsersRoot = (props: UseGetUsersRootProps) => useGet<UsersModel, void, void, void>(encode`/user/`, props);


export interface PutUsersRootQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
  /**
   * First name
   */
  fname?: string;
  /**
   * Last name
   */
  lname?: string;
  /**
   * Telephone
   */
  phone?: string;
  /**
   * Address line 1
   */
  address1?: string;
  /**
   * Address line 2
   */
  address2?: string;
  /**
   * Postal code
   */
  zipcode?: string;
}

export type PutUsersRootProps = Omit<MutateProps<UsersModel[], void, PutUsersRootQueryParams, void, void>, "path" | "verb">;

/**
 * Change consumer user attributes
 */
export const PutUsersRoot = (props: PutUsersRootProps) => (
  <Mutate<UsersModel[], void, PutUsersRootQueryParams, void, void>
    verb="PUT"
    path={encode`/user/`}
    
    {...props}
  />
);

export type UsePutUsersRootProps = Omit<UseMutateProps<UsersModel[], void, PutUsersRootQueryParams, void, void>, "path" | "verb">;

/**
 * Change consumer user attributes
 */
export const usePutUsersRoot = (props: UsePutUsersRootProps) => useMutate<UsersModel[], void, PutUsersRootQueryParams, void, void>("PUT", encode`/user/`, props);


export interface GetUserAppLogQueryParams {
  /**
   * the user id for which logs will be retrieved
   */
  uid?: number;
  /**
   * Log usertime start date YYYY-MM-DD HH24:MM:SS
   */
  sdate: string;
  /**
   * Log usertime end date YYYY-MM-DD HH24:MM:SS
   */
  edate: string;
  /**
   * When true returns JSON instead of the CSV default format
   */
  return_json?: boolean;
}

export type GetUserAppLogProps = Omit<GetProps<UserApplogItem[], void, GetUserAppLogQueryParams, void>, "path">;

/**
 * Retrieves log activity for the specified user_id
 */
export const GetUserAppLog = (props: GetUserAppLogProps) => (
  <Get<UserApplogItem[], void, GetUserAppLogQueryParams, void>
    path={encode`/user/applog`}
    
    {...props}
  />
);

export type UseGetUserAppLogProps = Omit<UseGetProps<UserApplogItem[], void, GetUserAppLogQueryParams, void>, "path">;

/**
 * Retrieves log activity for the specified user_id
 */
export const useGetUserAppLog = (props: UseGetUserAppLogProps) => useGet<UserApplogItem[], void, GetUserAppLogQueryParams, void>(encode`/user/applog`, props);


export interface PostUserAppLogQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
  /**
   * time log was created utc YYYY-MM-DD HH24:MM:SS
   */
  created_at: string;
  /**
   * time log was created usertime YYYY-MM-DD HH24:MM:SS
   */
  usertime: string;
  /**
   * the log message, can be stringified JSON
   */
  msg: string;
}

export type PostUserAppLogProps = Omit<MutateProps<UserApplogPostResponse, void, PostUserAppLogQueryParams, void, void>, "path" | "verb">;

/**
 * Logs app or other front end activity for the consumer user id calling this endpoint
 */
export const PostUserAppLog = (props: PostUserAppLogProps) => (
  <Mutate<UserApplogPostResponse, void, PostUserAppLogQueryParams, void, void>
    verb="POST"
    path={encode`/user/applog`}
    
    {...props}
  />
);

export type UsePostUserAppLogProps = Omit<UseMutateProps<UserApplogPostResponse, void, PostUserAppLogQueryParams, void, void>, "path" | "verb">;

/**
 * Logs app or other front end activity for the consumer user id calling this endpoint
 */
export const usePostUserAppLog = (props: UsePostUserAppLogProps) => useMutate<UserApplogPostResponse, void, PostUserAppLogQueryParams, void, void>("POST", encode`/user/applog`, props);


export interface GetDebugUsersQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
}

export type GetDebugUsersProps = Omit<GetProps<UserDebugStatusModel, void, GetDebugUsersQueryParams, void>, "path">;

/**
 * Get the debug status of a consumer user
 */
export const GetDebugUsers = (props: GetDebugUsersProps) => (
  <Get<UserDebugStatusModel, void, GetDebugUsersQueryParams, void>
    path={encode`/user/debug`}
    
    {...props}
  />
);

export type UseGetDebugUsersProps = Omit<UseGetProps<UserDebugStatusModel, void, GetDebugUsersQueryParams, void>, "path">;

/**
 * Get the debug status of a consumer user
 */
export const useGetDebugUsers = (props: UseGetDebugUsersProps) => useGet<UserDebugStatusModel, void, GetDebugUsersQueryParams, void>(encode`/user/debug`, props);


export interface PostDebugUsersQueryParams {
  /**
   * The user id
   */
  uid: number;
  /**
   * The new debug status
   */
  debug: boolean;
}

export type PostDebugUsersProps = Omit<MutateProps<UserDebugStatusModel, void, PostDebugUsersQueryParams, void, void>, "path" | "verb">;

/**
 * Set the debug status of a consumer user
 */
export const PostDebugUsers = (props: PostDebugUsersProps) => (
  <Mutate<UserDebugStatusModel, void, PostDebugUsersQueryParams, void, void>
    verb="POST"
    path={encode`/user/debug`}
    
    {...props}
  />
);

export type UsePostDebugUsersProps = Omit<UseMutateProps<UserDebugStatusModel, void, PostDebugUsersQueryParams, void, void>, "path" | "verb">;

/**
 * Set the debug status of a consumer user
 */
export const usePostDebugUsers = (props: UsePostDebugUsersProps) => useMutate<UserDebugStatusModel, void, PostDebugUsersQueryParams, void, void>("POST", encode`/user/debug`, props);


export interface GetUserVerifyEmailPathParams {
  email: string
}

export type GetUserVerifyEmailProps = Omit<GetProps<void, void, void, GetUserVerifyEmailPathParams>, "path"> & GetUserVerifyEmailPathParams;

/**
 * Resends the consumer's email verification code by sms and email
 */
export const GetUserVerifyEmail = ({email, ...props}: GetUserVerifyEmailProps) => (
  <Get<void, void, void, GetUserVerifyEmailPathParams>
    path={encode`/user/emailverify/${email}`}
    
    {...props}
  />
);

export type UseGetUserVerifyEmailProps = Omit<UseGetProps<void, void, void, GetUserVerifyEmailPathParams>, "path"> & GetUserVerifyEmailPathParams;

/**
 * Resends the consumer's email verification code by sms and email
 */
export const useGetUserVerifyEmail = ({email, ...props}: UseGetUserVerifyEmailProps) => useGet<void, void, void, GetUserVerifyEmailPathParams>((paramsInPath: GetUserVerifyEmailPathParams) => encode`/user/emailverify/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export interface PostUserVerifyEmailQueryParams {
  /**
   * verification code created by /signup
   */
  verification_code: string;
}

export interface PostUserVerifyEmailPathParams {
  email: string
}

export type PostUserVerifyEmailProps = Omit<MutateProps<UsersModel, void, PostUserVerifyEmailQueryParams, void, PostUserVerifyEmailPathParams>, "path" | "verb"> & PostUserVerifyEmailPathParams;

/**
 * Verifies a consumer's email adddress with a verification code created by /signup
 */
export const PostUserVerifyEmail = ({email, ...props}: PostUserVerifyEmailProps) => (
  <Mutate<UsersModel, void, PostUserVerifyEmailQueryParams, void, PostUserVerifyEmailPathParams>
    verb="POST"
    path={encode`/user/emailverify/${email}`}
    
    {...props}
  />
);

export type UsePostUserVerifyEmailProps = Omit<UseMutateProps<UsersModel, void, PostUserVerifyEmailQueryParams, void, PostUserVerifyEmailPathParams>, "path" | "verb"> & PostUserVerifyEmailPathParams;

/**
 * Verifies a consumer's email adddress with a verification code created by /signup
 */
export const usePostUserVerifyEmail = ({email, ...props}: UsePostUserVerifyEmailProps) => useMutate<UsersModel, void, PostUserVerifyEmailQueryParams, void, PostUserVerifyEmailPathParams>("POST", (paramsInPath: PostUserVerifyEmailPathParams) => encode`/user/emailverify/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export type GetUserFrontEndSettingsProps = Omit<GetProps<void, void, void, void>, "path">;

/**
 * Get the consumer's front end format agnostic settings JSON object in the whole body of the response
 */
export const GetUserFrontEndSettings = (props: GetUserFrontEndSettingsProps) => (
  <Get<void, void, void, void>
    path={encode`/user/frontendsettings`}
    
    {...props}
  />
);

export type UseGetUserFrontEndSettingsProps = Omit<UseGetProps<void, void, void, void>, "path">;

/**
 * Get the consumer's front end format agnostic settings JSON object in the whole body of the response
 */
export const useGetUserFrontEndSettings = (props: UseGetUserFrontEndSettingsProps) => useGet<void, void, void, void>(encode`/user/frontendsettings`, props);


export type PostUserFrontEndSettingsProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * Create or update the consumer's front end format agnostic JSON object from the whole body of the request
 */
export const PostUserFrontEndSettings = (props: PostUserFrontEndSettingsProps) => (
  <Mutate<void, void, void, void, void>
    verb="POST"
    path={encode`/user/frontendsettings`}
    
    {...props}
  />
);

export type UsePostUserFrontEndSettingsProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * Create or update the consumer's front end format agnostic JSON object from the whole body of the request
 */
export const usePostUserFrontEndSettings = (props: UsePostUserFrontEndSettingsProps) => useMutate<void, void, void, void, void>("POST", encode`/user/frontendsettings`, props);


export interface PostConsumerUserLoginQueryParams {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
  /**
   * Device make
   */
  make?: string;
  /**
   * Device model
   */
  model?: string;
  /**
   * OS version
   */
  osversion?: string;
  /**
   * App version
   */
  appversion?: string;
}

export type PostConsumerUserLoginProps = Omit<MutateProps<UserLoginResponseModel, void | UserLoginAdditionalResponseModel, PostConsumerUserLoginQueryParams, void, void>, "path" | "verb">;

/**
 * Logs a consumer in, fails if the email address has not been verified or the password needs to be changed
 */
export const PostConsumerUserLogin = (props: PostConsumerUserLoginProps) => (
  <Mutate<UserLoginResponseModel, void | UserLoginAdditionalResponseModel, PostConsumerUserLoginQueryParams, void, void>
    verb="POST"
    path={encode`/user/login`}
    
    {...props}
  />
);

export type UsePostConsumerUserLoginProps = Omit<UseMutateProps<UserLoginResponseModel, void | UserLoginAdditionalResponseModel, PostConsumerUserLoginQueryParams, void, void>, "path" | "verb">;

/**
 * Logs a consumer in, fails if the email address has not been verified or the password needs to be changed
 */
export const usePostConsumerUserLogin = (props: UsePostConsumerUserLoginProps) => useMutate<UserLoginResponseModel, void | UserLoginAdditionalResponseModel, PostConsumerUserLoginQueryParams, void, void>("POST", encode`/user/login`, props);


export interface GetUserPasswordPathParams {
  email: string
}

export type GetUserPasswordProps = Omit<GetProps<void, void | UserLoginAdditionalResponseModel, void, GetUserPasswordPathParams>, "path"> & GetUserPasswordPathParams;

/**
 * Sends a temporary password by email to the consumer, requires a verified email address
 */
export const GetUserPassword = ({email, ...props}: GetUserPasswordProps) => (
  <Get<void, void | UserLoginAdditionalResponseModel, void, GetUserPasswordPathParams>
    path={encode`/user/password/${email}`}
    
    {...props}
  />
);

export type UseGetUserPasswordProps = Omit<UseGetProps<void, void | UserLoginAdditionalResponseModel, void, GetUserPasswordPathParams>, "path"> & GetUserPasswordPathParams;

/**
 * Sends a temporary password by email to the consumer, requires a verified email address
 */
export const useGetUserPassword = ({email, ...props}: UseGetUserPasswordProps) => useGet<void, void | UserLoginAdditionalResponseModel, void, GetUserPasswordPathParams>((paramsInPath: GetUserPasswordPathParams) => encode`/user/password/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export interface PostUserPasswordQueryParams {
  /**
   * old / current password
   */
  old_password: string;
  /**
   * New password, must be 4 digits
   */
  new_password1: string;
  /**
   * Confirmation new password must match new_password1
   */
  new_password2: string;
}

export interface PostUserPasswordPathParams {
  email: string
}

export type PostUserPasswordProps = Omit<MutateProps<UsersModel, void | UserLoginAdditionalResponseModel, PostUserPasswordQueryParams, void, PostUserPasswordPathParams>, "path" | "verb"> & PostUserPasswordPathParams;

/**
 * Changes the password of the consumer, requires a verified email address
 */
export const PostUserPassword = ({email, ...props}: PostUserPasswordProps) => (
  <Mutate<UsersModel, void | UserLoginAdditionalResponseModel, PostUserPasswordQueryParams, void, PostUserPasswordPathParams>
    verb="POST"
    path={encode`/user/password/${email}`}
    
    {...props}
  />
);

export type UsePostUserPasswordProps = Omit<UseMutateProps<UsersModel, void | UserLoginAdditionalResponseModel, PostUserPasswordQueryParams, void, PostUserPasswordPathParams>, "path" | "verb"> & PostUserPasswordPathParams;

/**
 * Changes the password of the consumer, requires a verified email address
 */
export const usePostUserPassword = ({email, ...props}: UsePostUserPasswordProps) => useMutate<UsersModel, void | UserLoginAdditionalResponseModel, PostUserPasswordQueryParams, void, PostUserPasswordPathParams>("POST", (paramsInPath: PostUserPasswordPathParams) => encode`/user/password/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export interface PutUserPasswordQueryParams {
  /**
   * New password, must be 4 digits
   */
  new_password?: string;
  /**
   * New status
   */
  new_status?: string;
  /**
   * New verification code
   */
  new_verification_code?: string;
  /**
   * New password change required
   */
  new_password_change_required?: boolean;
}

export interface PutUserPasswordPathParams {
  email: string
}

export type PutUserPasswordProps = Omit<MutateProps<void, void, PutUserPasswordQueryParams, void, PutUserPasswordPathParams>, "path" | "verb"> & PutUserPasswordPathParams;

/**
 * Allows an admin to set the password, status, verification code, and email verification pin of a consumer user
 */
export const PutUserPassword = ({email, ...props}: PutUserPasswordProps) => (
  <Mutate<void, void, PutUserPasswordQueryParams, void, PutUserPasswordPathParams>
    verb="PUT"
    path={encode`/user/password/${email}`}
    
    {...props}
  />
);

export type UsePutUserPasswordProps = Omit<UseMutateProps<void, void, PutUserPasswordQueryParams, void, PutUserPasswordPathParams>, "path" | "verb"> & PutUserPasswordPathParams;

/**
 * Allows an admin to set the password, status, verification code, and email verification pin of a consumer user
 */
export const usePutUserPassword = ({email, ...props}: UsePutUserPasswordProps) => useMutate<void, void, PutUserPasswordQueryParams, void, PutUserPasswordPathParams>("PUT", (paramsInPath: PutUserPasswordPathParams) => encode`/user/password/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export interface PostUserDisplayPushNotificationQueryParams {
  /**
   * The title of the notification
   */
  title?: string;
  /**
   * The text of the notification
   */
  notification: string;
  /**
   * Unique device id
   */
  device_id?: string;
}

export interface PostUserDisplayPushNotificationPathParams {
  id: number
}

export type PostUserDisplayPushNotificationProps = Omit<MutateProps<void, void, PostUserDisplayPushNotificationQueryParams, void, PostUserDisplayPushNotificationPathParams>, "path" | "verb"> & PostUserDisplayPushNotificationPathParams;

/**
 * Send a display only push notification from an Admin user to a consumer user via twilio
 */
export const PostUserDisplayPushNotification = ({id, ...props}: PostUserDisplayPushNotificationProps) => (
  <Mutate<void, void, PostUserDisplayPushNotificationQueryParams, void, PostUserDisplayPushNotificationPathParams>
    verb="POST"
    path={encode`/user/pushnotification/${id}`}
    
    {...props}
  />
);

export type UsePostUserDisplayPushNotificationProps = Omit<UseMutateProps<void, void, PostUserDisplayPushNotificationQueryParams, void, PostUserDisplayPushNotificationPathParams>, "path" | "verb"> & PostUserDisplayPushNotificationPathParams;

/**
 * Send a display only push notification from an Admin user to a consumer user via twilio
 */
export const usePostUserDisplayPushNotification = ({id, ...props}: UsePostUserDisplayPushNotificationProps) => useMutate<void, void, PostUserDisplayPushNotificationQueryParams, void, PostUserDisplayPushNotificationPathParams>("POST", (paramsInPath: PostUserDisplayPushNotificationPathParams) => encode`/user/pushnotification/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface GetUserPushTokenQueryParams {
  /**
   * User id
   */
  uid: number;
  /**
   * Unique device id
   */
  device_id?: string;
}

export type GetUserPushTokenProps = Omit<GetProps<PushTokenModel, void, GetUserPushTokenQueryParams, void>, "path">;

/**
 * Get the token for push notifications via twilio
 */
export const GetUserPushToken = (props: GetUserPushTokenProps) => (
  <Get<PushTokenModel, void, GetUserPushTokenQueryParams, void>
    path={encode`/user/pushtoken`}
    
    {...props}
  />
);

export type UseGetUserPushTokenProps = Omit<UseGetProps<PushTokenModel, void, GetUserPushTokenQueryParams, void>, "path">;

/**
 * Get the token for push notifications via twilio
 */
export const useGetUserPushToken = (props: UseGetUserPushTokenProps) => useGet<PushTokenModel, void, GetUserPushTokenQueryParams, void>(encode`/user/pushtoken`, props);


export interface PostUserPushTokenQueryParams {
  /**
   * NOT required for consumer clients, for whom the user id is extracted from the access token itself; admins can debug this endpoint by specifying a user id
   */
  uid?: number;
  /**
   * Unique device id
   */
  device_id: string;
  /**
   * OS name, one of: iOS,Android
   */
  os_name: string;
  /**
   * Push Notification Token
   */
  token: string;
}

export type PostUserPushTokenProps = Omit<MutateProps<PushTokenModel, void, PostUserPushTokenQueryParams, void, void>, "path" | "verb">;

/**
 * Set the token for push notifications to a specific consumer device via twilio
 */
export const PostUserPushToken = (props: PostUserPushTokenProps) => (
  <Mutate<PushTokenModel, void, PostUserPushTokenQueryParams, void, void>
    verb="POST"
    path={encode`/user/pushtoken`}
    
    {...props}
  />
);

export type UsePostUserPushTokenProps = Omit<UseMutateProps<PushTokenModel, void, PostUserPushTokenQueryParams, void, void>, "path" | "verb">;

/**
 * Set the token for push notifications to a specific consumer device via twilio
 */
export const usePostUserPushToken = (props: UsePostUserPushTokenProps) => useMutate<PushTokenModel, void, PostUserPushTokenQueryParams, void, void>("POST", encode`/user/pushtoken`, props);


export interface PostUserSignupQueryParams {
  /**
   * Email address
   */
  email: string;
  /**
   * Password
   */
  password: string;
  /**
   * First name
   */
  fname: string;
  /**
   * Last name
   */
  lname: string;
  /**
   * Telephone
   */
  phone: string;
  /**
   * Address line 1
   */
  address1: string;
  /**
   * Address line 2
   */
  address2?: string;
  /**
   * Postal code
   */
  zipcode: string;
}

export type PostUserSignupProps = Omit<MutateProps<UsersModel, void, PostUserSignupQueryParams, void, void>, "path" | "verb">;

/**
 * Signup for users in the Consumer role, sends email verification code by sms and email
 */
export const PostUserSignup = (props: PostUserSignupProps) => (
  <Mutate<UsersModel, void, PostUserSignupQueryParams, void, void>
    verb="POST"
    path={encode`/user/signup`}
    
    {...props}
  />
);

export type UsePostUserSignupProps = Omit<UseMutateProps<UsersModel, void, PostUserSignupQueryParams, void, void>, "path" | "verb">;

/**
 * Signup for users in the Consumer role, sends email verification code by sms and email
 */
export const usePostUserSignup = (props: UsePostUserSignupProps) => useMutate<UsersModel, void, PostUserSignupQueryParams, void, void>("POST", encode`/user/signup`, props);


export type GetUserSubusersProps = Omit<GetProps<UsersModel[], void, void, void>, "path">;

/**
 * Lists the sub users of a consumer user
 */
export const GetUserSubusers = (props: GetUserSubusersProps) => (
  <Get<UsersModel[], void, void, void>
    path={encode`/user/subuser`}
    
    {...props}
  />
);

export type UseGetUserSubusersProps = Omit<UseGetProps<UsersModel[], void, void, void>, "path">;

/**
 * Lists the sub users of a consumer user
 */
export const useGetUserSubusers = (props: UseGetUserSubusersProps) => useGet<UsersModel[], void, void, void>(encode`/user/subuser`, props);


export interface PostUserSubusersQueryParams {
  /**
   * First name
   */
  fname: string;
  /**
   * Last name
   */
  lname: string;
  /**
   * Email address
   */
  email: string;
  /**
   * Telephone number
   */
  phone: string;
  /**
   * Relation, one of Spouse,Child,Friend,Other
   */
  relation: string;
}

export type PostUserSubusersProps = Omit<MutateProps<void, void, PostUserSubusersQueryParams, void, void>, "path" | "verb">;

/**
 * Invite a new or re-invite a pending or deleted sub user to join or re-join GeoToll
 */
export const PostUserSubusers = (props: PostUserSubusersProps) => (
  <Mutate<void, void, PostUserSubusersQueryParams, void, void>
    verb="POST"
    path={encode`/user/subuser`}
    
    {...props}
  />
);

export type UsePostUserSubusersProps = Omit<UseMutateProps<void, void, PostUserSubusersQueryParams, void, void>, "path" | "verb">;

/**
 * Invite a new or re-invite a pending or deleted sub user to join or re-join GeoToll
 */
export const usePostUserSubusers = (props: UsePostUserSubusersProps) => useMutate<void, void, PostUserSubusersQueryParams, void, void>("POST", encode`/user/subuser`, props);


export interface PostUserSubusersByIdPathParams {
  id: number
}

export type PostUserSubusersByIdProps = Omit<MutateProps<UsersModel, void, void, void, PostUserSubusersByIdPathParams>, "path" | "verb"> & PostUserSubusersByIdPathParams;

/**
 * Undeletes an existing subuser restoring its status to Active
 */
export const PostUserSubusersById = ({id, ...props}: PostUserSubusersByIdProps) => (
  <Mutate<UsersModel, void, void, void, PostUserSubusersByIdPathParams>
    verb="POST"
    path={encode`/user/subuser/undelete/${id}`}
    
    {...props}
  />
);

export type UsePostUserSubusersByIdProps = Omit<UseMutateProps<UsersModel, void, void, void, PostUserSubusersByIdPathParams>, "path" | "verb"> & PostUserSubusersByIdPathParams;

/**
 * Undeletes an existing subuser restoring its status to Active
 */
export const usePostUserSubusersById = ({id, ...props}: UsePostUserSubusersByIdProps) => useMutate<UsersModel, void, void, void, PostUserSubusersByIdPathParams>("POST", (paramsInPath: PostUserSubusersByIdPathParams) => encode`/user/subuser/undelete/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeleteUserSubusersByIdProps = Omit<MutateProps<UsersModel, void, void, string, void>, "path" | "verb">;

/**
 * Delete a sub user
 */
export const DeleteUserSubusersById = (props: DeleteUserSubusersByIdProps) => (
  <Mutate<UsersModel, void, void, string, void>
    verb="DELETE"
    path={encode`/user/subuser`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteUserSubusersByIdProps = Omit<UseMutateProps<UsersModel, void, void, string, void>, "path" | "verb">;

/**
 * Delete a sub user
 */
export const useDeleteUserSubusersById = (props: UseDeleteUserSubusersByIdProps) => useMutate<UsersModel, void, void, string, void>("DELETE", encode`/user/subuser`, { pathInlineBodyEncode: encodingFn,  ...props });


export type GetUserTollRunConditionsProps = Omit<GetProps<TollrunConditionsModel, void, void, void>, "path">;

/**
 * Get the consumer's own conditions for starting and continuing in a toll run
 */
export const GetUserTollRunConditions = (props: GetUserTollRunConditionsProps) => (
  <Get<TollrunConditionsModel, void, void, void>
    path={encode`/user/tollrunconditions`}
    
    {...props}
  />
);

export type UseGetUserTollRunConditionsProps = Omit<UseGetProps<TollrunConditionsModel, void, void, void>, "path">;

/**
 * Get the consumer's own conditions for starting and continuing in a toll run
 */
export const useGetUserTollRunConditions = (props: UseGetUserTollRunConditionsProps) => useGet<TollrunConditionsModel, void, void, void>(encode`/user/tollrunconditions`, props);


export type DeleteAdminUserTollRunConditionsProps = Omit<MutateProps<TollrunConditionsModel, void, void, string, void>, "path" | "verb">;

/**
 * Admin delete user specific conditions for starting and continuing in a toll run
 */
export const DeleteAdminUserTollRunConditions = (props: DeleteAdminUserTollRunConditionsProps) => (
  <Mutate<TollrunConditionsModel, void, void, string, void>
    verb="DELETE"
    path={encode`/user/tollrunconditions`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteAdminUserTollRunConditionsProps = Omit<UseMutateProps<TollrunConditionsModel, void, void, string, void>, "path" | "verb">;

/**
 * Admin delete user specific conditions for starting and continuing in a toll run
 */
export const useDeleteAdminUserTollRunConditions = (props: UseDeleteAdminUserTollRunConditionsProps) => useMutate<TollrunConditionsModel, void, void, string, void>("DELETE", encode`/user/tollrunconditions`, { pathInlineBodyEncode: encodingFn,  ...props });


export interface GetAdminUserTollRunConditionsQueryParams {
  /**
   * When true returns only the user's custom contitions, otherwise returns default conditions when custom conditions are not available
   */
  nodefault?: boolean;
}

export interface GetAdminUserTollRunConditionsPathParams {
  id: number
}

export type GetAdminUserTollRunConditionsProps = Omit<GetProps<TollrunConditionsModel, void, GetAdminUserTollRunConditionsQueryParams, GetAdminUserTollRunConditionsPathParams>, "path"> & GetAdminUserTollRunConditionsPathParams;

/**
 * Admin get user specific conditions for starting and continuing in a toll run
 */
export const GetAdminUserTollRunConditions = ({id, ...props}: GetAdminUserTollRunConditionsProps) => (
  <Get<TollrunConditionsModel, void, GetAdminUserTollRunConditionsQueryParams, GetAdminUserTollRunConditionsPathParams>
    path={encode`/user/tollrunconditions/${id}`}
    
    {...props}
  />
);

export type UseGetAdminUserTollRunConditionsProps = Omit<UseGetProps<TollrunConditionsModel, void, GetAdminUserTollRunConditionsQueryParams, GetAdminUserTollRunConditionsPathParams>, "path"> & GetAdminUserTollRunConditionsPathParams;

/**
 * Admin get user specific conditions for starting and continuing in a toll run
 */
export const useGetAdminUserTollRunConditions = ({id, ...props}: UseGetAdminUserTollRunConditionsProps) => useGet<TollrunConditionsModel, void, GetAdminUserTollRunConditionsQueryParams, GetAdminUserTollRunConditionsPathParams>((paramsInPath: GetAdminUserTollRunConditionsPathParams) => encode`/user/tollrunconditions/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PostAdminUserTollRunConditionsQueryParams {
  /**
   * Minimum balance
   */
  min_balance: number;
}

export interface PostAdminUserTollRunConditionsPathParams {
  id: number
}

export type PostAdminUserTollRunConditionsProps = Omit<MutateProps<TollrunConditionsModel, void, PostAdminUserTollRunConditionsQueryParams, void, PostAdminUserTollRunConditionsPathParams>, "path" | "verb"> & PostAdminUserTollRunConditionsPathParams;

/**
 * Admin set user specific conditions for starting and continuing in a toll run
 */
export const PostAdminUserTollRunConditions = ({id, ...props}: PostAdminUserTollRunConditionsProps) => (
  <Mutate<TollrunConditionsModel, void, PostAdminUserTollRunConditionsQueryParams, void, PostAdminUserTollRunConditionsPathParams>
    verb="POST"
    path={encode`/user/tollrunconditions/${id}`}
    
    {...props}
  />
);

export type UsePostAdminUserTollRunConditionsProps = Omit<UseMutateProps<TollrunConditionsModel, void, PostAdminUserTollRunConditionsQueryParams, void, PostAdminUserTollRunConditionsPathParams>, "path" | "verb"> & PostAdminUserTollRunConditionsPathParams;

/**
 * Admin set user specific conditions for starting and continuing in a toll run
 */
export const usePostAdminUserTollRunConditions = ({id, ...props}: UsePostAdminUserTollRunConditionsProps) => useMutate<TollrunConditionsModel, void, PostAdminUserTollRunConditionsQueryParams, void, PostAdminUserTollRunConditionsPathParams>("POST", (paramsInPath: PostAdminUserTollRunConditionsPathParams) => encode`/user/tollrunconditions/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface GetUsersZipCodeRootPathParams {
  zipcode: string
}

export type GetUsersZipCodeRootProps = Omit<GetProps<void, void, void, GetUsersZipCodeRootPathParams>, "path"> & GetUsersZipCodeRootPathParams;

/**
 * Get information about a zip code to auto fill user signup forms
 */
export const GetUsersZipCodeRoot = ({zipcode, ...props}: GetUsersZipCodeRootProps) => (
  <Get<void, void, void, GetUsersZipCodeRootPathParams>
    path={encode`/user/zipcode/${zipcode}`}
    
    {...props}
  />
);

export type UseGetUsersZipCodeRootProps = Omit<UseGetProps<void, void, void, GetUsersZipCodeRootPathParams>, "path"> & GetUsersZipCodeRootPathParams;

/**
 * Get information about a zip code to auto fill user signup forms
 */
export const useGetUsersZipCodeRoot = ({zipcode, ...props}: UseGetUsersZipCodeRootProps) => useGet<void, void, void, GetUsersZipCodeRootPathParams>((paramsInPath: GetUsersZipCodeRootPathParams) => encode`/user/zipcode/${paramsInPath.zipcode}`, {  pathParams: { zipcode }, ...props });


export interface GetListOneUserByEmailPathParams {
  /**
   * a Consumer user email address
   */
  email: string
}

export type GetListOneUserByEmailProps = Omit<GetProps<UsersModel, void, void, GetListOneUserByEmailPathParams>, "path"> & GetListOneUserByEmailPathParams;

/**
 * Get the user in the Consumer role with a matching email address (case insensitive)
 */
export const GetListOneUserByEmail = ({email, ...props}: GetListOneUserByEmailProps) => (
  <Get<UsersModel, void, void, GetListOneUserByEmailPathParams>
    path={encode`/user/${email}`}
    
    {...props}
  />
);

export type UseGetListOneUserByEmailProps = Omit<UseGetProps<UsersModel, void, void, GetListOneUserByEmailPathParams>, "path"> & GetListOneUserByEmailPathParams;

/**
 * Get the user in the Consumer role with a matching email address (case insensitive)
 */
export const useGetListOneUserByEmail = ({email, ...props}: UseGetListOneUserByEmailProps) => useGet<UsersModel, void, void, GetListOneUserByEmailPathParams>((paramsInPath: GetListOneUserByEmailPathParams) => encode`/user/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export interface GetListOneUserByIdPathParams {
  /**
   * a Consumer user id
   */
  id: number
}

export type GetListOneUserByIdProps = Omit<GetProps<UsersModel, void, void, GetListOneUserByIdPathParams>, "path"> & GetListOneUserByIdPathParams;

/**
 * Get the user in the Consumer role with a matching id
 */
export const GetListOneUserById = ({id, ...props}: GetListOneUserByIdProps) => (
  <Get<UsersModel, void, void, GetListOneUserByIdPathParams>
    path={encode`/user/${id}`}
    
    {...props}
  />
);

export type UseGetListOneUserByIdProps = Omit<UseGetProps<UsersModel, void, void, GetListOneUserByIdPathParams>, "path"> & GetListOneUserByIdPathParams;

/**
 * Get the user in the Consumer role with a matching id
 */
export const useGetListOneUserById = ({id, ...props}: UseGetListOneUserByIdProps) => useGet<UsersModel, void, void, GetListOneUserByIdPathParams>((paramsInPath: GetListOneUserByIdPathParams) => encode`/user/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface GetVehiclesRootQueryParams {
  /**
   * Set to True to also retrieve large tag images
   */
  include_tagimage?: boolean;
  /**
   * Set to True to avoid listing deleted vehicles
   */
  available_only?: boolean;
}

export type GetVehiclesRootProps = Omit<GetProps<VehicleModel[], void, GetVehiclesRootQueryParams, void>, "path">;

/**
 * Get a list of both available and deleted vehicles, including vehicles that belong to the main user of a sub user.
 */
export const GetVehiclesRoot = (props: GetVehiclesRootProps) => (
  <Get<VehicleModel[], void, GetVehiclesRootQueryParams, void>
    path={encode`/vehicles/`}
    
    {...props}
  />
);

export type UseGetVehiclesRootProps = Omit<UseGetProps<VehicleModel[], void, GetVehiclesRootQueryParams, void>, "path">;

/**
 * Get a list of both available and deleted vehicles, including vehicles that belong to the main user of a sub user.
 */
export const useGetVehiclesRoot = (props: UseGetVehiclesRootProps) => useGet<VehicleModel[], void, GetVehiclesRootQueryParams, void>(encode`/vehicles/`, props);


export interface PostVehiclesRootQueryParams {
  /**
   * Vehicle tag image
   */
  tagimage: string;
  /**
   * Vehicle license plate
   */
  tag: string;
  /**
   * The vehicle State
   */
  state: string;
  /**
   * The vehicle number of axles
   */
  axle: number;
  /**
   * The vehicle type
   */
  vtype: string;
  /**
   * Is the vehicle electric?
   */
  electric: boolean;
  /**
   * Is it a rental vehicle?
   */
  rental: boolean;
  /**
   * The rental company name
   */
  rental_company?: string;
  /**
   * Rental start date must not be in the future
   */
  rental_start?: string;
  /**
   * Rental end date must be within 10 days of today
   */
  rental_end?: string;
  /**
   * Optional vehicle year
   */
  year?: number;
  /**
   * Optional vehicle color
   */
  color?: string;
  /**
   * Optional vehicle make
   */
  make?: string;
  /**
   * Optional vehicle model
   */
  model?: string;
}

export type PostVehiclesRootProps = Omit<MutateProps<VehicleModel, void, PostVehiclesRootQueryParams, void, void>, "path" | "verb">;

/**
 * Add a new vehicle
 */
export const PostVehiclesRoot = (props: PostVehiclesRootProps) => (
  <Mutate<VehicleModel, void, PostVehiclesRootQueryParams, void, void>
    verb="POST"
    path={encode`/vehicles/`}
    
    {...props}
  />
);

export type UsePostVehiclesRootProps = Omit<UseMutateProps<VehicleModel, void, PostVehiclesRootQueryParams, void, void>, "path" | "verb">;

/**
 * Add a new vehicle
 */
export const usePostVehiclesRoot = (props: UsePostVehiclesRootProps) => useMutate<VehicleModel, void, PostVehiclesRootQueryParams, void, void>("POST", encode`/vehicles/`, props);


export interface GetVehiclesMakeModelsRootPathParams {
  make: string
}

export type GetVehiclesMakeModelsRootProps = Omit<GetProps<void, void, void, GetVehiclesMakeModelsRootPathParams>, "path"> & GetVehiclesMakeModelsRootPathParams;

/**
 * Get available models of a vehicle's make auto fill vehicle forms
 */
export const GetVehiclesMakeModelsRoot = ({make, ...props}: GetVehiclesMakeModelsRootProps) => (
  <Get<void, void, void, GetVehiclesMakeModelsRootPathParams>
    path={encode`/vehicles/models/${make}`}
    
    {...props}
  />
);

export type UseGetVehiclesMakeModelsRootProps = Omit<UseGetProps<void, void, void, GetVehiclesMakeModelsRootPathParams>, "path"> & GetVehiclesMakeModelsRootPathParams;

/**
 * Get available models of a vehicle's make auto fill vehicle forms
 */
export const useGetVehiclesMakeModelsRoot = ({make, ...props}: UseGetVehiclesMakeModelsRootProps) => useGet<void, void, void, GetVehiclesMakeModelsRootPathParams>((paramsInPath: GetVehiclesMakeModelsRootPathParams) => encode`/vehicles/models/${paramsInPath.make}`, {  pathParams: { make }, ...props });


export interface PostVehiclesUndeleteByIdPathParams {
  id: number
}

export type PostVehiclesUndeleteByIdProps = Omit<MutateProps<VehicleModel, void, void, void, PostVehiclesUndeleteByIdPathParams>, "path" | "verb"> & PostVehiclesUndeleteByIdPathParams;

/**
 * Undelete an existing deleted vehicle
 */
export const PostVehiclesUndeleteById = ({id, ...props}: PostVehiclesUndeleteByIdProps) => (
  <Mutate<VehicleModel, void, void, void, PostVehiclesUndeleteByIdPathParams>
    verb="POST"
    path={encode`/vehicles/undelete/${id}`}
    
    {...props}
  />
);

export type UsePostVehiclesUndeleteByIdProps = Omit<UseMutateProps<VehicleModel, void, void, void, PostVehiclesUndeleteByIdPathParams>, "path" | "verb"> & PostVehiclesUndeleteByIdPathParams;

/**
 * Undelete an existing deleted vehicle
 */
export const usePostVehiclesUndeleteById = ({id, ...props}: UsePostVehiclesUndeleteByIdProps) => useMutate<VehicleModel, void, void, void, PostVehiclesUndeleteByIdPathParams>("POST", (paramsInPath: PostVehiclesUndeleteByIdPathParams) => encode`/vehicles/undelete/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type GetVehiclesValuesRootProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * Get a list of acceptable values for vehicle attributes
 */
export const GetVehiclesValuesRoot = (props: GetVehiclesValuesRootProps) => (
  <Get<void, unknown, void, void>
    path={encode`/vehicles/values`}
    
    {...props}
  />
);

export type UseGetVehiclesValuesRootProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * Get a list of acceptable values for vehicle attributes
 */
export const useGetVehiclesValuesRoot = (props: UseGetVehiclesValuesRootProps) => useGet<void, unknown, void, void>(encode`/vehicles/values`, props);


export type DeleteVehiclesByIdProps = Omit<MutateProps<VehicleModel, void, void, string, void>, "path" | "verb">;

/**
 * Delete an existing vehicle
 */
export const DeleteVehiclesById = (props: DeleteVehiclesByIdProps) => (
  <Mutate<VehicleModel, void, void, string, void>
    verb="DELETE"
    path={encode`/vehicles`}
    pathInlineBodyEncode={encodingFn}
    {...props}
  />
);

export type UseDeleteVehiclesByIdProps = Omit<UseMutateProps<VehicleModel, void, void, string, void>, "path" | "verb">;

/**
 * Delete an existing vehicle
 */
export const useDeleteVehiclesById = (props: UseDeleteVehiclesByIdProps) => useMutate<VehicleModel, void, void, string, void>("DELETE", encode`/vehicles`, { pathInlineBodyEncode: encodingFn,  ...props });


export interface PutVehiclesByIdQueryParams {
  /**
   * An optional valid vehicle make
   */
  make?: string;
  /**
   * An optional valid vehicle model
   */
  model?: string;
  /**
   * An optional valid vehicle year
   */
  year?: number;
  /**
   * An optional valid vehicle color
   */
  color?: string;
  /**
   * For rental vehicles, an optional rental end date YYYY-MM-DD HH:MM:SS
   */
  rental_end?: string;
}

export interface PutVehiclesByIdPathParams {
  id: number
}

export type PutVehiclesByIdProps = Omit<MutateProps<VehicleModel, void, PutVehiclesByIdQueryParams, void, PutVehiclesByIdPathParams>, "path" | "verb"> & PutVehiclesByIdPathParams;

/**
 * Edit an existing vehicle
 */
export const PutVehiclesById = ({id, ...props}: PutVehiclesByIdProps) => (
  <Mutate<VehicleModel, void, PutVehiclesByIdQueryParams, void, PutVehiclesByIdPathParams>
    verb="PUT"
    path={encode`/vehicles/${id}`}
    
    {...props}
  />
);

export type UsePutVehiclesByIdProps = Omit<UseMutateProps<VehicleModel, void, PutVehiclesByIdQueryParams, void, PutVehiclesByIdPathParams>, "path" | "verb"> & PutVehiclesByIdPathParams;

/**
 * Edit an existing vehicle
 */
export const usePutVehiclesById = ({id, ...props}: UsePutVehiclesByIdProps) => useMutate<VehicleModel, void, PutVehiclesByIdQueryParams, void, PutVehiclesByIdPathParams>("PUT", (paramsInPath: PutVehiclesByIdPathParams) => encode`/vehicles/${paramsInPath.id}`, {  pathParams: { id }, ...props });

